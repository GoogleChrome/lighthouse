{
  "version": 3,
  "sources": ["node-modules-polyfills:process", "../process-global.js", "replace-modules:module", "../../shared/statistics.js", "../../shared/util.js", "../../core/lib/page-functions.js", "../../core/gather/driver/execution-context.js", "page-functions-test-case-getElementsInDocument.js"],
  "sourcesContent": ["// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\nvar cachedSetTimeout = defaultSetTimout;\nvar cachedClearTimeout = defaultClearTimeout;\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nfunction nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nvar title = 'browser';\nvar platform = 'browser';\nvar browser = true;\nvar env = {};\nvar argv = [];\nvar version = ''; // empty string to avoid regexp issues\nvar versions = {};\nvar release = {};\nvar config = {};\n\nfunction noop() {}\n\nvar on = noop;\nvar addListener = noop;\nvar once = noop;\nvar off = noop;\nvar removeListener = noop;\nvar removeAllListeners = noop;\nvar emit = noop;\n\nfunction binding(name) {\n    throw new Error('process.binding is not supported');\n}\n\nfunction cwd () { return '/' }\nfunction chdir (dir) {\n    throw new Error('process.chdir is not supported');\n}function umask() { return 0; }\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {};\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() };\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3;\n  var seconds = Math.floor(clocktime);\n  var nanoseconds = Math.floor((clocktime%1)*1e9);\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0];\n    nanoseconds = nanoseconds - previousTimestamp[1];\n    if (nanoseconds<0) {\n      seconds--;\n      nanoseconds += 1e9;\n    }\n  }\n  return [seconds,nanoseconds]\n}\n\nvar startTime = new Date();\nfunction uptime() {\n  var currentTime = new Date();\n  var dif = currentTime - startTime;\n  return dif / 1000;\n}\n\nvar browser$1 = {\n  nextTick: nextTick,\n  title: title,\n  browser: browser,\n  env: env,\n  argv: argv,\n  version: version,\n  versions: versions,\n  on: on,\n  addListener: addListener,\n  once: once,\n  off: off,\n  removeListener: removeListener,\n  removeAllListeners: removeAllListeners,\n  emit: emit,\n  binding: binding,\n  cwd: cwd,\n  chdir: chdir,\n  umask: umask,\n  hrtime: hrtime,\n  platform: platform,\n  release: release,\n  config: config,\n  uptime: uptime\n};\n\nexport { addListener, argv, binding, browser, chdir, config, cwd, browser$1 as default, emit, env, hrtime, nextTick, off, on, once, platform, release, removeAllListeners, removeListener, title, umask, uptime, version, versions };\n", "import process from 'process';\n\n// eslint-disable-next-line no-undef\nglobalThis.process = process;\n", "\n          export const createRequire = () => {\n            return {\n              resolve() {\n                throw new Error('createRequire.resolve is not supported in bundled Lighthouse');\n              },\n            };\n          };\n        ", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// The exact double values for the max and min scores possible in each range.\nconst MIN_PASSING_SCORE = 0.90000000000000002220446049250313080847263336181640625;\nconst MAX_AVERAGE_SCORE = 0.899999999999999911182158029987476766109466552734375;\nconst MIN_AVERAGE_SCORE = 0.5;\nconst MAX_FAILING_SCORE = 0.499999999999999944488848768742172978818416595458984375;\n\n/**\n * Approximates the Gauss error function, the probability that a random variable\n * from the standard normal distribution lies within [-x, x]. Moved from\n * traceviewer.b.math.erf, based on Abramowitz and Stegun, formula 7.1.26.\n * @param {number} x\n * @return {number}\n */\nfunction erf(x) {\n  // erf(-x) = -erf(x);\n  const sign = Math.sign(x);\n  x = Math.abs(x);\n\n  const a1 = 0.254829592;\n  const a2 = -0.284496736;\n  const a3 = 1.421413741;\n  const a4 = -1.453152027;\n  const a5 = 1.061405429;\n  const p = 0.3275911;\n  const t = 1 / (1 + p * x);\n  const y = t * (a1 + t * (a2 + t * (a3 + t * (a4 + t * a5))));\n  return sign * (1 - y * Math.exp(-x * x));\n}\n\n/**\n * Returns the score (1 - percentile) of `value` in a log-normal distribution\n * specified by the `median` value, at which the score will be 0.5, and a 10th\n * percentile value, at which the score will be 0.9. The score represents the\n * amount of the distribution greater than `value`. All values should be in the\n * same units (e.g. milliseconds). See\n *   https://www.desmos.com/calculator/o98tbeyt1t\n * for an interactive view of the relationship between these parameters and the\n * typical parameterization (location and shape) of the log-normal distribution.\n * @param {{median: number, p10: number}} parameters\n * @param {number} value\n * @return {number}\n */\nfunction getLogNormalScore({median, p10}, value) {\n  // Required for the log-normal distribution.\n  if (median <= 0) throw new Error('median must be greater than zero');\n  if (p10 <= 0) throw new Error('p10 must be greater than zero');\n  // Not strictly required, but if p10 > median, it flips around and becomes the p90 point.\n  if (p10 >= median) throw new Error('p10 must be less than the median');\n\n  // Non-positive values aren't in the distribution, so always 1.\n  if (value <= 0) return 1;\n\n  // Closest double to `erfc-1(1/5)`.\n  const INVERSE_ERFC_ONE_FIFTH = 0.9061938024368232;\n\n  // Shape (σ) is `|log(p10/median) / (sqrt(2)*erfc^-1(1/5))|` and\n  // standardizedX is `1/2 erfc(log(value/median) / (sqrt(2)*σ))`, so simplify a bit.\n  const xRatio = Math.max(Number.MIN_VALUE, value / median); // value and median are > 0, so is ratio.\n  const xLogRatio = Math.log(xRatio);\n  const p10Ratio = Math.max(Number.MIN_VALUE, p10 / median); // p10 and median are > 0, so is ratio.\n  const p10LogRatio = -Math.log(p10Ratio); // negate to keep σ positive.\n  const standardizedX = xLogRatio * INVERSE_ERFC_ONE_FIFTH / p10LogRatio;\n  const complementaryPercentile = (1 - erf(standardizedX)) / 2;\n\n  // Clamp to avoid floating-point out-of-bounds issues and keep score in expected range.\n  let score;\n  if (value <= p10) {\n    // Passing. Clamp to [0.9, 1].\n    score = Math.max(MIN_PASSING_SCORE, Math.min(1, complementaryPercentile));\n  } else if (value <= median) {\n    // Average. Clamp to [0.5, 0.9).\n    score = Math.max(MIN_AVERAGE_SCORE, Math.min(MAX_AVERAGE_SCORE, complementaryPercentile));\n  } else {\n    // Failing. Clamp to [0, 0.5).\n    score = Math.max(0, Math.min(MAX_FAILING_SCORE, complementaryPercentile));\n  }\n  return score;\n}\n\n/**\n * Interpolates the y value at a point x on the line defined by (x0, y0) and (x1, y1)\n * @param {number} x0\n * @param {number} y0\n * @param {number} x1\n * @param {number} y1\n * @param {number} x\n * @return {number}\n */\nfunction linearInterpolation(x0, y0, x1, y1, x) {\n  const slope = (y1 - y0) / (x1 - x0);\n  return y0 + (x - x0) * slope;\n}\n\nexport {\n  linearInterpolation,\n  getLogNormalScore,\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as statistics from './statistics.js';\n\n/** @typedef {import('../types/lhr/audit-details').default.SnippetValue} SnippetValue */\n\nconst ELLIPSIS = '\\u2026';\nconst NBSP = '\\xa0';\nconst PASS_THRESHOLD = 0.9;\n\nconst RATINGS = {\n  PASS: {label: 'pass', minScore: PASS_THRESHOLD},\n  AVERAGE: {label: 'average', minScore: 0.5},\n  FAIL: {label: 'fail'},\n  ERROR: {label: 'error'},\n};\n\n// 25 most used tld plus one domains (aka public suffixes) from http archive.\n// @see https://github.com/GoogleChrome/lighthouse/pull/5065#discussion_r191926212\n// The canonical list is https://publicsuffix.org/learn/ but we're only using subset to conserve bytes\nconst listOfTlds = [\n  'com', 'co', 'gov', 'edu', 'ac', 'org', 'go', 'gob', 'or', 'net', 'in', 'ne', 'nic', 'gouv',\n  'web', 'spb', 'blog', 'jus', 'kiev', 'mil', 'wi', 'qc', 'ca', 'bel', 'on',\n];\n\nclass Util {\n  static get RATINGS() {\n    return RATINGS;\n  }\n\n  static get PASS_THRESHOLD() {\n    return PASS_THRESHOLD;\n  }\n\n  static get MS_DISPLAY_VALUE() {\n    return `%10d${NBSP}ms`;\n  }\n\n  /**\n   * If LHR is older than 10.0 it will not have the `finalDisplayedUrl` property.\n   * Old LHRs should have the `finalUrl` property which will work fine for the report.\n   *\n   * @param {LH.Result} lhr\n   */\n  static getFinalDisplayedUrl(lhr) {\n    if (lhr.finalDisplayedUrl) return lhr.finalDisplayedUrl;\n    if (lhr.finalUrl) return lhr.finalUrl;\n    throw new Error('Could not determine final displayed URL');\n  }\n\n  /**\n   * If LHR is older than 10.0 it will not have the `mainDocumentUrl` property.\n   * Old LHRs should have the `finalUrl` property which is the same as `mainDocumentUrl`.\n   *\n   * @param {LH.Result} lhr\n   */\n  static getMainDocumentUrl(lhr) {\n    return lhr.mainDocumentUrl || lhr.finalUrl;\n  }\n\n  /**\n   * @param {LH.Result} lhr\n   * @return {LH.Result.FullPageScreenshot=}\n   */\n  static getFullPageScreenshot(lhr) {\n    if (lhr.fullPageScreenshot) {\n      return lhr.fullPageScreenshot;\n    }\n\n    // Prior to 10.0.\n    const details = /** @type {LH.Result.FullPageScreenshot=} */ (\n      lhr.audits['full-page-screenshot']?.details);\n    return details;\n  }\n\n  /**\n   * Given the entity classification dataset and a URL, identify the entity.\n   * @param {string} url\n   * @param {LH.Result.Entities=} entities\n   * @return {LH.Result.LhrEntity|string}\n   */\n  static getEntityFromUrl(url, entities) {\n    // If it's a pre-v10 LHR, we don't have entities, so match against the root-ish domain\n    if (!entities) {\n      return Util.getPseudoRootDomain(url);\n    }\n\n    const entity = entities.find(e => e.origins.find(origin => url.startsWith(origin)));\n    // This fallback case would be unexpected, but leaving for safety.\n    return entity || Util.getPseudoRootDomain(url);\n  }\n\n  /**\n   * Split a string by markdown code spans (enclosed in `backticks`), splitting\n   * into segments that were enclosed in backticks (marked as `isCode === true`)\n   * and those that outside the backticks (`isCode === false`).\n   * @param {string} text\n   * @return {Array<{isCode: true, text: string}|{isCode: false, text: string}>}\n   */\n  static splitMarkdownCodeSpans(text) {\n    /** @type {Array<{isCode: true, text: string}|{isCode: false, text: string}>} */\n    const segments = [];\n\n    // Split on backticked code spans.\n    const parts = text.split(/`(.*?)`/g);\n    for (let i = 0; i < parts.length; i ++) {\n      const text = parts[i];\n\n      // Empty strings are an artifact of splitting, not meaningful.\n      if (!text) continue;\n\n      // Alternates between plain text and code segments.\n      const isCode = i % 2 !== 0;\n      segments.push({\n        isCode,\n        text,\n      });\n    }\n\n    return segments;\n  }\n\n  /**\n   * Split a string on markdown links (e.g. [some link](https://...)) into\n   * segments of plain text that weren't part of a link (marked as\n   * `isLink === false`), and segments with text content and a URL that did make\n   * up a link (marked as `isLink === true`).\n   * @param {string} text\n   * @return {Array<{isLink: true, text: string, linkHref: string}|{isLink: false, text: string}>}\n   */\n  static splitMarkdownLink(text) {\n    /** @type {Array<{isLink: true, text: string, linkHref: string}|{isLink: false, text: string}>} */\n    const segments = [];\n\n    const parts = text.split(/\\[([^\\]]+?)\\]\\((https?:\\/\\/.*?)\\)/g);\n    while (parts.length) {\n      // Shift off the same number of elements as the pre-split and capture groups.\n      const [preambleText, linkText, linkHref] = parts.splice(0, 3);\n\n      if (preambleText) { // Skip empty text as it's an artifact of splitting, not meaningful.\n        segments.push({\n          isLink: false,\n          text: preambleText,\n        });\n      }\n\n      // Append link if there are any.\n      if (linkText && linkHref) {\n        segments.push({\n          isLink: true,\n          text: linkText,\n          linkHref,\n        });\n      }\n    }\n\n    return segments;\n  }\n\n  /**\n   * @param {string} string\n   * @param {number} characterLimit\n   * @param {string} ellipseSuffix\n   */\n  static truncate(string, characterLimit, ellipseSuffix = '…') {\n    // Early return for the case where there are fewer bytes than the character limit.\n    if (string.length <= characterLimit) {\n      return string;\n    }\n\n    const segmenter = new Intl.Segmenter(undefined, {granularity: 'grapheme'});\n    const iterator = segmenter.segment(string)[Symbol.iterator]();\n\n    let lastSegmentIndex = 0;\n    for (let i = 0; i <= characterLimit - ellipseSuffix.length; i++) {\n      const result = iterator.next();\n      if (result.done) {\n        return string;\n      }\n\n      lastSegmentIndex = result.value.index;\n    }\n\n    for (let i = 0; i < ellipseSuffix.length; i++) {\n      if (iterator.next().done) {\n        return string;\n      }\n    }\n\n    return string.slice(0, lastSegmentIndex) + ellipseSuffix;\n  }\n\n  /**\n   * @param {URL} parsedUrl\n   * @param {{numPathParts?: number, preserveQuery?: boolean, preserveHost?: boolean}=} options\n   * @return {string}\n   */\n  static getURLDisplayName(parsedUrl, options) {\n    // Closure optional properties aren't optional in tsc, so fallback needs undefined  values.\n    options = options || {numPathParts: undefined, preserveQuery: undefined,\n      preserveHost: undefined};\n    const numPathParts = options.numPathParts !== undefined ? options.numPathParts : 2;\n    const preserveQuery = options.preserveQuery !== undefined ? options.preserveQuery : true;\n    const preserveHost = options.preserveHost || false;\n\n    let name;\n\n    if (parsedUrl.protocol === 'about:' || parsedUrl.protocol === 'data:') {\n      // Handle 'about:*' and 'data:*' URLs specially since they have no path.\n      name = parsedUrl.href;\n    } else {\n      name = parsedUrl.pathname;\n      const parts = name.split('/').filter(part => part.length);\n      if (numPathParts && parts.length > numPathParts) {\n        name = ELLIPSIS + parts.slice(-1 * numPathParts).join('/');\n      }\n\n      if (preserveHost) {\n        name = `${parsedUrl.host}/${name.replace(/^\\//, '')}`;\n      }\n      if (preserveQuery) {\n        name = `${name}${parsedUrl.search}`;\n      }\n    }\n\n    const MAX_LENGTH = 64;\n    if (parsedUrl.protocol !== 'data:') {\n      // Even non-data uris can be 10k characters long.\n      name = name.slice(0, 200);\n      // Always elide hexadecimal hash\n      name = name.replace(/([a-f0-9]{7})[a-f0-9]{13}[a-f0-9]*/g, `$1${ELLIPSIS}`);\n      // Also elide other hash-like mixed-case strings\n      name = name.replace(/([a-zA-Z0-9-_]{9})(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9-_]{10,}/g,\n        `$1${ELLIPSIS}`);\n      // Also elide long number sequences\n      name = name.replace(/(\\d{3})\\d{6,}/g, `$1${ELLIPSIS}`);\n      // Merge any adjacent ellipses\n      name = name.replace(/\\u2026+/g, ELLIPSIS);\n\n      // Elide query params first\n      if (name.length > MAX_LENGTH && name.includes('?')) {\n        // Try to leave the first query parameter intact\n        name = name.replace(/\\?([^=]*)(=)?.*/, `?$1$2${ELLIPSIS}`);\n\n        // Remove it all if it's still too long\n        if (name.length > MAX_LENGTH) {\n          name = name.replace(/\\?.*/, `?${ELLIPSIS}`);\n        }\n      }\n    }\n\n    // Elide too long names next\n    if (name.length > MAX_LENGTH) {\n      const dotIndex = name.lastIndexOf('.');\n      if (dotIndex >= 0) {\n        name = name.slice(0, MAX_LENGTH - 1 - (name.length - dotIndex)) +\n          // Show file extension\n          `${ELLIPSIS}${name.slice(dotIndex)}`;\n      } else {\n        name = name.slice(0, MAX_LENGTH - 1) + ELLIPSIS;\n      }\n    }\n\n    return name;\n  }\n\n  /**\n   * Returns the origin portion of a Chrome extension URL.\n   * @param {string} url\n   * @return {string}\n   */\n  static getChromeExtensionOrigin(url) {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol + '//' + parsedUrl.host;\n  }\n\n  /**\n   * Split a URL into a file, hostname and origin for easy display.\n   * @param {string} url\n   * @return {{file: string, hostname: string, origin: string}}\n   */\n  static parseURL(url) {\n    const parsedUrl = new URL(url);\n    return {\n      file: Util.getURLDisplayName(parsedUrl),\n      hostname: parsedUrl.hostname,\n      // Node's URL parsing behavior is different than Chrome and returns 'null'\n      // for chrome-extension:// URLs. See https://github.com/nodejs/node/issues/21955.\n      origin: parsedUrl.protocol === 'chrome-extension:' ?\n        Util.getChromeExtensionOrigin(url) : parsedUrl.origin,\n    };\n  }\n\n  /**\n   * @param {string|URL} value\n   * @return {!URL}\n   */\n  static createOrReturnURL(value) {\n    if (value instanceof URL) {\n      return value;\n    }\n\n    return new URL(value);\n  }\n\n  /**\n   * Gets the tld of a domain\n   * This function is used only while rendering pre-10.0 LHRs.\n   *\n   * @param {string} hostname\n   * @return {string} tld\n   */\n  static getPseudoTld(hostname) {\n    const tlds = hostname.split('.').slice(-2);\n\n    if (!listOfTlds.includes(tlds[0])) {\n      return `.${tlds[tlds.length - 1]}`;\n    }\n\n    return `.${tlds.join('.')}`;\n  }\n\n  /**\n   * Returns a primary domain for provided hostname (e.g. www.example.com -> example.com).\n   * As it doesn't consult the Public Suffix List, it can sometimes lose detail.\n   * See the `listOfTlds` comment above for more.\n   * This function is used only while rendering pre-10.0 LHRs. See UrlUtils.getRootDomain\n   * for the current method that makes use of PSL.\n   * @param {string|URL} url hostname or URL object\n   * @return {string}\n   */\n  static getPseudoRootDomain(url) {\n    const hostname = Util.createOrReturnURL(url).hostname;\n    const tld = Util.getPseudoTld(hostname);\n\n    // tld is .com or .co.uk which means we means that length is 1 to big\n    // .com => 2 & .co.uk => 3\n    const splitTld = tld.split('.');\n\n    // get TLD + root domain\n    return hostname.split('.').slice(-splitTld.length).join('.');\n  }\n\n  /**\n   * Returns only lines that are near a message, or the first few lines if there are\n   * no line messages.\n   * @param {SnippetValue['lines']} lines\n   * @param {SnippetValue['lineMessages']} lineMessages\n   * @param {number} surroundingLineCount Number of lines to include before and after\n   * the message. If this is e.g. 2 this function might return 5 lines.\n   */\n  static filterRelevantLines(lines, lineMessages, surroundingLineCount) {\n    if (lineMessages.length === 0) {\n      // no lines with messages, just return the first bunch of lines\n      return lines.slice(0, surroundingLineCount * 2 + 1);\n    }\n\n    const minGapSize = 3;\n    const lineNumbersToKeep = new Set();\n    // Sort messages so we can check lineNumbersToKeep to see how big the gap to\n    // the previous line is.\n    lineMessages = lineMessages.sort((a, b) => (a.lineNumber || 0) - (b.lineNumber || 0));\n    lineMessages.forEach(({lineNumber}) => {\n      let firstSurroundingLineNumber = lineNumber - surroundingLineCount;\n      let lastSurroundingLineNumber = lineNumber + surroundingLineCount;\n\n      while (firstSurroundingLineNumber < 1) {\n        // make sure we still show (surroundingLineCount * 2 + 1) lines in total\n        firstSurroundingLineNumber++;\n        lastSurroundingLineNumber++;\n      }\n      // If only a few lines would be omitted normally then we prefer to include\n      // extra lines to avoid the tiny gap\n      if (lineNumbersToKeep.has(firstSurroundingLineNumber - minGapSize - 1)) {\n        firstSurroundingLineNumber -= minGapSize;\n      }\n      for (let i = firstSurroundingLineNumber; i <= lastSurroundingLineNumber; i++) {\n        const surroundingLineNumber = i;\n        lineNumbersToKeep.add(surroundingLineNumber);\n      }\n    });\n\n    return lines.filter(line => lineNumbersToKeep.has(line.lineNumber));\n  }\n\n  /**\n   * Computes a score between 0 and 1 based on the measured `value`. Score is determined by\n   * considering a log-normal distribution governed by two control points (the 10th\n   * percentile value and the median value) and represents the percentage of sites that are\n   * greater than `value`.\n   *\n   * Score characteristics:\n   * - within [0, 1]\n   * - rounded to two digits\n   * - value must meet or beat a controlPoint value to meet or exceed its percentile score:\n   *   - value > median will give a score < 0.5; value ≤ median will give a score ≥ 0.5.\n   *   - value > p10 will give a score < 0.9; value ≤ p10 will give a score ≥ 0.9.\n   * - values < p10 will get a slight boost so a score of 1 is achievable by a\n   *   `value` other than those close to 0. Scores of > ~0.99524 end up rounded to 1.\n   * @param {{median: number, p10: number}} controlPoints\n   * @param {number} value\n   * @return {number}\n   */\n  static computeLogNormalScore(controlPoints, value) {\n    let percentile = statistics.getLogNormalScore(controlPoints, value);\n    // Add a boost to scores of 90+, linearly ramping from 0 at 0.9 to half a\n    // point (0.005) at 1. Expands scores in (0.9, 1] to (0.9, 1.005], so more top\n    // scores will be a perfect 1 after the two-digit `Math.floor()` rounding below.\n    if (percentile > 0.9) { // getLogNormalScore ensures `percentile` can't exceed 1.\n      percentile += 0.05 * (percentile - 0.9);\n    }\n    return Math.floor(percentile * 100) / 100;\n  }\n}\n\nexport {\n  Util,\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {createRequire} from 'module';\n\nimport {Util} from '../../shared/util.js';\n\n/**\n * @fileoverview\n * Helper functions that are passed by `toString()` by Driver to be evaluated in target page.\n *\n * Every function in this module only runs in the browser, so it is ignored from\n * the c8 code coverage tool. See c8.sh\n *\n * Important: this module should only be imported like this:\n *     const pageFunctions = require('...');\n * Never like this:\n *     const {justWhatINeed} = require('...');\n * Otherwise, minification will mangle the variable names and break usage.\n */\n\n/**\n * `typed-query-selector`'s CSS selector parser.\n * @template {string} T\n * @typedef {import('typed-query-selector/parser').ParseSelector<T>} ParseSelector\n */\n\n/* global window document Node ShadowRoot HTMLElement */\n\n/**\n * The `exceptionDetails` provided by the debugger protocol does not contain the useful\n * information such as name, message, and stack trace of the error when it's wrapped in a\n * promise. Instead, map to a successful object that contains this information.\n * @param {string|Error} [err] The error to convert\n * @return {{__failedInBrowser: boolean, name: string, message: string, stack: string|undefined}}\n */\nfunction wrapRuntimeEvalErrorInBrowser(err) {\n  if (!err || typeof err === 'string') {\n    err = new Error(err);\n  }\n\n  return {\n    __failedInBrowser: true,\n    name: err.name || 'Error',\n    message: err.message || 'unknown error',\n    stack: err.stack,\n  };\n}\n\n/**\n * @template {string} T\n * @param {T=} selector Optional simple CSS selector to filter nodes on.\n *     Combinators are not supported.\n * @return {Array<ParseSelector<T>>}\n */\nfunction getElementsInDocument(selector) {\n  const realMatchesFn = window.__ElementMatches || window.Element.prototype.matches;\n  /** @type {Array<ParseSelector<T>>} */\n  const results = [];\n\n  /** @param {NodeListOf<Element>} nodes */\n  const _findAllElements = nodes => {\n    for (const el of nodes) {\n      if (!selector || realMatchesFn.call(el, selector)) {\n        /** @type {ParseSelector<T>} */\n        // @ts-expect-error - el is verified as matching above, tsc just can't verify it through the .call().\n        const matchedEl = el;\n        results.push(matchedEl);\n      }\n\n      // If the element has a shadow root, dig deeper.\n      if (el.shadowRoot) {\n        _findAllElements(el.shadowRoot.querySelectorAll('*'));\n      }\n    }\n  };\n  _findAllElements(document.querySelectorAll('*'));\n\n  return results;\n}\n\n/**\n * Gets the opening tag text of the given node.\n * @param {Element|ShadowRoot} element\n * @param {Array<string>=} ignoreAttrs An optional array of attribute tags to not include in the HTML snippet.\n * @return {string}\n */\nfunction getOuterHTMLSnippet(element, ignoreAttrs = [], snippetCharacterLimit = 500) {\n  const ATTRIBUTE_CHAR_LIMIT = 75;\n  // Autofill information that is injected into the snippet via AutofillShowTypePredictions\n  // TODO(paulirish): Don't clean title attribute from all elements if it's unnecessary\n  const autoFillIgnoreAttrs = ['autofill-information', 'autofill-prediction', 'title'];\n\n  // ShadowRoots are sometimes passed in; use their hosts' outerHTML.\n  if (element instanceof ShadowRoot) {\n    element = element.host;\n  }\n\n  try {\n    /** @type {Element} */\n    // @ts-expect-error - clone will be same type as element - see https://github.com/microsoft/TypeScript/issues/283\n    const clone = element.cloneNode();\n\n    // Prevent any potential side-effects by appending to a template element.\n    // See https://github.com/GoogleChrome/lighthouse/issues/11465\n    const template = element.ownerDocument.createElement('template');\n    template.content.append(clone);\n    ignoreAttrs.concat(autoFillIgnoreAttrs).forEach(attribute =>{\n      clone.removeAttribute(attribute);\n    });\n    let charCount = 0;\n    for (const attributeName of clone.getAttributeNames()) {\n      if (charCount > snippetCharacterLimit) {\n        clone.removeAttribute(attributeName);\n        continue;\n      }\n\n      let attributeValue = clone.getAttribute(attributeName);\n      if (attributeValue === null) continue; // Can't happen.\n\n      let dirty = false;\n\n      // Replace img.src with img.currentSrc. Same for audio and video.\n      if (attributeName === 'src' && 'currentSrc' in element) {\n        const elementWithSrc = /** @type {HTMLImageElement|HTMLMediaElement} */ (element);\n        const currentSrc = elementWithSrc.currentSrc;\n        // Only replace if the two URLs do not resolve to the same location.\n        const documentHref = elementWithSrc.ownerDocument.location.href;\n        if (new URL(attributeValue, documentHref).toString() !== currentSrc) {\n          attributeValue = currentSrc;\n          dirty = true;\n        }\n      }\n\n      // Elide attribute value if too long.\n      const truncatedString = truncate(attributeValue, ATTRIBUTE_CHAR_LIMIT);\n      if (truncatedString !== attributeValue) dirty = true;\n      attributeValue = truncatedString;\n\n      if (dirty) {\n        // Style attributes can be blocked by the CSP if they are set via `setAttribute`.\n        // If we are trying to set the style attribute, use `el.style.cssText` instead.\n        // https://github.com/GoogleChrome/lighthouse/issues/13630\n        if (attributeName === 'style') {\n          const elementWithStyle = /** @type {HTMLElement} */ (clone);\n          elementWithStyle.style.cssText = attributeValue;\n        } else {\n          clone.setAttribute(attributeName, attributeValue);\n        }\n      }\n      charCount += attributeName.length + attributeValue.length;\n    }\n\n    const reOpeningTag = /^[\\s\\S]*?>/;\n    const [match] = clone.outerHTML.match(reOpeningTag) || [];\n    if (match && charCount > snippetCharacterLimit) {\n      return match.slice(0, match.length - 1) + ' …>';\n    }\n    return match || '';\n  } catch (_) {\n    // As a last resort, fall back to localName.\n    return `<${element.localName}>`;\n  }\n}\n\n/**\n * Computes a memory/CPU performance benchmark index to determine rough device class.\n * @see https://github.com/GoogleChrome/lighthouse/issues/9085\n * @see https://docs.google.com/spreadsheets/d/1E0gZwKsxegudkjJl8Fki_sOwHKpqgXwt8aBAfuUaB8A/edit?usp=sharing\n *\n * Historically (until LH 6.3), this benchmark created a string of length 100,000 in a loop, and returned\n * the number of times per second the string can be created.\n *\n * Changes to v8 in 8.6.106 changed this number and also made Chrome more variable w.r.t GC interupts.\n * This benchmark now is a hybrid of a similar GC-heavy approach to the original benchmark and an array\n * copy benchmark.\n *\n * As of Chrome m86...\n *\n *  - 1000+ is a desktop-class device, Core i3 PC, iPhone X, etc\n *  - 800+ is a high-end Android phone, Galaxy S8, low-end Chromebook, etc\n *  - 125+ is a mid-tier Android phone, Moto G4, etc\n *  - <125 is a budget Android phone, Alcatel Ideal, Galaxy J2, etc\n * @return {number}\n */\nfunction computeBenchmarkIndex() {\n  /**\n   * The GC-heavy benchmark that creates a string of length 10000 in a loop.\n   * The returned index is the number of times per second the string can be created divided by 10.\n   * The division by 10 is to keep similar magnitudes to an earlier version of BenchmarkIndex that\n   * used a string length of 100000 instead of 10000.\n   */\n  function benchmarkIndexGC() {\n    const start = Date.now();\n    let iterations = 0;\n\n    while (Date.now() - start < 500) {\n      let s = '';\n      for (let j = 0; j < 10000; j++) s += 'a';\n      if (s.length === 1) throw new Error('will never happen, but prevents compiler optimizations');\n\n      iterations++;\n    }\n\n    const durationInSeconds = (Date.now() - start) / 1000;\n    return Math.round(iterations / 10 / durationInSeconds);\n  }\n\n  /**\n   * The non-GC-dependent benchmark that copies integers back and forth between two arrays of length 100000.\n   * The returned index is the number of times per second a copy can be made, divided by 10.\n   * The division by 10 is to keep similar magnitudes to the GC-dependent version.\n   */\n  function benchmarkIndexNoGC() {\n    const arrA = [];\n    const arrB = [];\n    for (let i = 0; i < 100000; i++) arrA[i] = arrB[i] = i;\n\n    const start = Date.now();\n    let iterations = 0;\n\n    // Some Intel CPUs have a performance cliff due to unlucky JCC instruction alignment.\n    // Two possible fixes: call Date.now less often, or manually unroll the inner loop a bit.\n    // We'll call Date.now less and only check the duration on every 10th iteration for simplicity.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=10954#c1.\n    while (iterations % 10 !== 0 || Date.now() - start < 500) {\n      const src = iterations % 2 === 0 ? arrA : arrB;\n      const tgt = iterations % 2 === 0 ? arrB : arrA;\n\n      for (let j = 0; j < src.length; j++) tgt[j] = src[j];\n\n      iterations++;\n    }\n\n    const durationInSeconds = (Date.now() - start) / 1000;\n    return Math.round(iterations / 10 / durationInSeconds);\n  }\n\n  // The final BenchmarkIndex is a simple average of the two components.\n  return (benchmarkIndexGC() + benchmarkIndexNoGC()) / 2;\n}\n\n/**\n * Adapted from DevTools' SDK.DOMNode.prototype.path\n *   https://github.com/ChromeDevTools/devtools-frontend/blob/4fff931bb/front_end/sdk/DOMModel.js#L625-L647\n * Backend: https://source.chromium.org/search?q=f:node.cc%20symbol:PrintNodePathTo&sq=&ss=chromium%2Fchromium%2Fsrc\n *\n * TODO: DevTools nodePath handling doesn't support iframes, but probably could. https://crbug.com/1127635\n * @param {Node} node\n * @return {string}\n */\nfunction getNodePath(node) {\n  // For our purposes, there's no worthwhile difference between shadow root and document fragment\n  // We can consider them entirely synonymous.\n  /** @param {Node} node @return {node is ShadowRoot} */\n  const isShadowRoot = node => node.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n  /** @param {Node} node */\n  const getNodeParent = node => isShadowRoot(node) ? node.host : node.parentNode;\n\n  /** @param {Node} node @return {number|'a'} */\n  function getNodeIndex(node) {\n    if (isShadowRoot(node)) {\n      // User-agent shadow roots get 'u'. Non-UA shadow roots get 'a'.\n      return 'a';\n    }\n    let index = 0;\n    let prevNode;\n    while (prevNode = node.previousSibling) { // eslint-disable-line no-cond-assign\n      node = prevNode;\n      // skip empty text nodes\n      if (node.nodeType === Node.TEXT_NODE && (node.nodeValue || '').trim().length === 0) continue;\n      index++;\n    }\n    return index;\n  }\n\n  /** @type {Node|null} */\n  let currentNode = node;\n  const path = [];\n  while (currentNode && getNodeParent(currentNode)) {\n    const index = getNodeIndex(currentNode);\n    path.push([index, currentNode.nodeName]);\n    currentNode = getNodeParent(currentNode);\n  }\n  path.reverse();\n  return path.join(',');\n}\n\n/**\n * @param {Element} element\n * @return {string}\n *\n * Note: CSS Selectors having no standard mechanism to describe shadow DOM piercing. So we can't.\n *\n * If the node resides within shadow DOM, the selector *only* starts from the shadow root.\n * For example, consider this img within a <section> within a shadow root..\n *  - DOM: <html> <body> <div> #shadow-root <section> <img/>\n *  - nodePath: 0,HTML,1,BODY,1,DIV,a,#document-fragment,0,SECTION,0,IMG\n *  - nodeSelector: section > img\n */\nfunction getNodeSelector(element) {\n  /**\n   * @param {Element} element\n   */\n  function getSelectorPart(element) {\n    let part = element.tagName.toLowerCase();\n    if (element.id) {\n      part += '#' + element.id;\n    } else if (element.classList.length > 0) {\n      part += '.' + element.classList[0];\n    }\n    return part;\n  }\n\n  const parts = [];\n  while (parts.length < 4) {\n    parts.unshift(getSelectorPart(element));\n    if (!element.parentElement) {\n      break;\n    }\n    element = element.parentElement;\n    if (element.tagName === 'HTML') {\n      break;\n    }\n  }\n  return parts.join(' > ');\n}\n\n/**\n * This function checks if an element or an ancestor of an element is `position:fixed`.\n * In addition we ensure that the element is capable of behaving as a `position:fixed`\n * element, checking that it lives within a scrollable ancestor.\n * @param {HTMLElement} element\n * @return {boolean}\n */\nfunction isPositionFixed(element) {\n  /**\n   * @param {HTMLElement} element\n   * @param {'overflowY'|'position'} attr\n   * @return {string}\n   */\n  function getStyleAttrValue(element, attr) {\n    // Check style before computedStyle as computedStyle is expensive.\n    return element.style[attr] || window.getComputedStyle(element)[attr];\n  }\n\n  // Position fixed/sticky has no effect in case when document does not scroll.\n  const htmlEl = document.querySelector('html');\n  if (!htmlEl) throw new Error('html element not found in document');\n  if (htmlEl.scrollHeight <= htmlEl.clientHeight ||\n      !['scroll', 'auto', 'visible'].includes(getStyleAttrValue(htmlEl, 'overflowY'))) {\n    return false;\n  }\n\n  /** @type {HTMLElement | null} */\n  let currentEl = element;\n  while (currentEl) {\n    const position = getStyleAttrValue(currentEl, 'position');\n    if ((position === 'fixed' || position === 'sticky')) {\n      return true;\n    }\n    currentEl = currentEl.parentElement;\n  }\n  return false;\n}\n\n/**\n * Generate a human-readable label for the given element, based on end-user facing\n * strings like the innerText or alt attribute.\n * Returns label string or null if no useful label is found.\n * @param {Element} element\n * @return {string | null}\n */\nfunction getNodeLabel(element) {\n  const tagName = element.tagName.toLowerCase();\n  // html and body content is too broad to be useful, since they contain all page content\n  if (tagName !== 'html' && tagName !== 'body') {\n    const nodeLabel = element instanceof HTMLElement && element.innerText ||\n        element.getAttribute('alt') || element.getAttribute('aria-label');\n    if (nodeLabel) {\n      return truncate(nodeLabel, 80);\n    } else {\n      // If no useful label was found then try to get one from a child.\n      // E.g. if an a tag contains an image but no text we want the image alt/aria-label attribute.\n      const nodeToUseForLabel = element.querySelector('[alt], [aria-label]');\n      if (nodeToUseForLabel) {\n        return getNodeLabel(nodeToUseForLabel);\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * @param {Element} element\n * @return {LH.Artifacts.Rect}\n */\nfunction getBoundingClientRect(element) {\n  const realBoundingClientRect = window.__HTMLElementBoundingClientRect ||\n    window.HTMLElement.prototype.getBoundingClientRect;\n  // The protocol does not serialize getters, so extract the values explicitly.\n  const rect = realBoundingClientRect.call(element);\n  return {\n    top: Math.round(rect.top),\n    bottom: Math.round(rect.bottom),\n    left: Math.round(rect.left),\n    right: Math.round(rect.right),\n    width: Math.round(rect.width),\n    height: Math.round(rect.height),\n  };\n}\n\n/**\n * RequestIdleCallback shim that calculates the remaining deadline time in order to avoid a potential lighthouse\n * penalty for tests run with simulated throttling. Reduces the deadline time to (50 - safetyAllowance) / cpuSlowdownMultiplier to\n * ensure a long task is very unlikely if using the API correctly.\n * @param {number} cpuSlowdownMultiplier\n */\nfunction wrapRequestIdleCallback(cpuSlowdownMultiplier) {\n  const safetyAllowanceMs = 10;\n  const maxExecutionTimeMs = Math.floor((50 - safetyAllowanceMs) / cpuSlowdownMultiplier);\n  const nativeRequestIdleCallback = window.requestIdleCallback;\n  window.requestIdleCallback = (cb, options) => {\n    /**\n     * @type {Parameters<typeof window['requestIdleCallback']>[0]}\n     */\n    const cbWrap = (deadline) => {\n      const start = Date.now();\n      // @ts-expect-error - save original on non-standard property.\n      deadline.__timeRemaining = deadline.timeRemaining;\n      deadline.timeRemaining = () => {\n        // @ts-expect-error - access non-standard property.\n        const timeRemaining = deadline.__timeRemaining();\n        return Math.min(timeRemaining, Math.max(0, maxExecutionTimeMs - (Date.now() - start))\n        );\n      };\n      deadline.timeRemaining.toString = () => {\n        return 'function timeRemaining() { [native code] }';\n      };\n      cb(deadline);\n    };\n    return nativeRequestIdleCallback(cbWrap, options);\n  };\n  window.requestIdleCallback.toString = () => {\n    return 'function requestIdleCallback() { [native code] }';\n  };\n}\n\n/**\n * @param {Element|ShadowRoot} element\n * @return {LH.Artifacts.NodeDetails}\n */\nfunction getNodeDetails(element) {\n  // This bookkeeping is for the FullPageScreenshot gatherer.\n  if (!window.__lighthouseNodesDontTouchOrAllVarianceGoesAway) {\n    window.__lighthouseNodesDontTouchOrAllVarianceGoesAway = new Map();\n  }\n\n  element = element instanceof ShadowRoot ? element.host : element;\n  const selector = getNodeSelector(element);\n\n  // Create an id that will be unique across all execution contexts.\n  //\n  // Made up of 3 components:\n  //   - prefix unique to specific execution context\n  //   - nth unique node seen by this function for this execution context\n  //   - node tagName\n  //\n  // Every page load only has up to two associated contexts - the page context\n  // (denoted as `__lighthouseExecutionContextUniqueIdentifier` being undefined)\n  // and the isolated context. The id must be unique to distinguish gatherers running\n  // on different page loads that identify the same logical element, for purposes\n  // of the full page screenshot node lookup; hence the prefix.\n  //\n  // The id could be any arbitrary string, the exact value is not important.\n  // For example, tagName is added only because it might be useful for debugging.\n  // But execution id and map size are added to ensure uniqueness.\n  // We also dedupe this id so that details collected for an element within the same\n  // pass and execution context will share the same id. Not technically important, but\n  // cuts down on some duplication.\n  let lhId = window.__lighthouseNodesDontTouchOrAllVarianceGoesAway.get(element);\n  if (!lhId) {\n    lhId = [\n      window.__lighthouseExecutionContextUniqueIdentifier === undefined ?\n        'page' :\n        window.__lighthouseExecutionContextUniqueIdentifier,\n      window.__lighthouseNodesDontTouchOrAllVarianceGoesAway.size,\n      element.tagName,\n    ].join('-');\n    window.__lighthouseNodesDontTouchOrAllVarianceGoesAway.set(element, lhId);\n  }\n\n  const details = {\n    lhId,\n    devtoolsNodePath: getNodePath(element),\n    selector: selector,\n    boundingRect: getBoundingClientRect(element),\n    snippet: getOuterHTMLSnippet(element),\n    nodeLabel: getNodeLabel(element) || selector,\n  };\n\n  return details;\n}\n\n/**\n *\n * @param {string} string\n * @param {number} characterLimit\n * @return {string}\n */\nfunction truncate(string, characterLimit) {\n  return Util.truncate(string, characterLimit);\n}\n\nfunction isBundledEnvironment() {\n  // If we're in DevTools or LightRider, we are definitely bundled.\n  // TODO: refactor and delete `globalThis.isDevtools`.\n  if (globalThis.isDevtools || globalThis.isLightrider) return true;\n\n  const require = createRequire({url: 'core/lib/page-functions.js'}.url);\n\n  try {\n    // Not foolproof, but `lighthouse-logger` is a dependency of lighthouse that should always be resolvable.\n    // `require.resolve` will only throw in atypical/bundled environments.\n    require.resolve('lighthouse-logger');\n    return false;\n  } catch (err) {\n    return true;\n  }\n}\n\n// This is to support bundled lighthouse.\n// esbuild calls every function with a builtin `__name` (since we set keepNames: true),\n// whose purpose is to store the real name of the function so that esbuild can rename it to avoid\n// collisions. Anywhere we inject dynamically generated code at runtime for the browser to process,\n// we must manually include this function (because esbuild only does so once at the top scope of\n// the bundle, which is irrelevant for code executed in the browser).\n// When minified, esbuild will mangle the name of this wrapper function, so we need to determine what it\n// is at runtime in order to recreate it within the page.\nconst esbuildFunctionWrapperString = createEsbuildFunctionWrapper();\n\nfunction createEsbuildFunctionWrapper() {\n  if (!isBundledEnvironment()) {\n    return '';\n  }\n\n  const functionAsString = (()=>{\n    // eslint-disable-next-line no-unused-vars\n    const a = ()=>{};\n  }).toString()\n    // When not minified, esbuild annotates the call to this function wrapper with PURE.\n    // We know further that the name of the wrapper function should be `__name`, but let's not\n    // hardcode that. Remove the PURE annotation to simplify the regex.\n    .replace('/* @__PURE__ */', '');\n  const functionStringMatch = functionAsString.match(/=\\s*([\\w_]+)\\(/);\n  if (!functionStringMatch) {\n    throw new Error('Could not determine esbuild function wrapper name');\n  }\n\n  /**\n   * @param {Function} fn\n   * @param {string} value\n   */\n  const esbuildFunctionWrapper = (fn, value) =>\n    Object.defineProperty(fn, 'name', {value, configurable: true});\n  const wrapperFnName = functionStringMatch[1];\n  return `let ${wrapperFnName}=${esbuildFunctionWrapper}`;\n}\n\n/**\n * @param {Function} fn\n * @return {string}\n */\nfunction getRuntimeFunctionName(fn) {\n  const match = fn.toString().match(/function ([\\w$]+)/);\n  if (!match) throw new Error(`could not find function name for: ${fn}`);\n  return match[1];\n}\n\n// We setup a number of our page functions to automatically include their dependencies.\n// Because of esbuild bundling, we must refer to the actual (mangled) runtime function name.\n/** @type {Record<string, string>} */\nconst names = {\n  truncate: getRuntimeFunctionName(truncate),\n  getNodeLabel: getRuntimeFunctionName(getNodeLabel),\n  getOuterHTMLSnippet: getRuntimeFunctionName(getOuterHTMLSnippet),\n  getNodeDetails: getRuntimeFunctionName(getNodeDetails),\n};\n\ntruncate.toString = () => `function ${names.truncate}(string, characterLimit) {\n  const Util = { ${Util.truncate} };\n  return Util.truncate(string, characterLimit);\n}`;\n\n/** @type {string} */\nconst getNodeLabelRawString = getNodeLabel.toString();\ngetNodeLabel.toString = () => `function ${names.getNodeLabel}(element) {\n  ${truncate};\n  return (${getNodeLabelRawString})(element);\n}`;\n\n/** @type {string} */\nconst getOuterHTMLSnippetRawString = getOuterHTMLSnippet.toString();\n// eslint-disable-next-line max-len\ngetOuterHTMLSnippet.toString = () => `function ${names.getOuterHTMLSnippet}(element, ignoreAttrs = [], snippetCharacterLimit = 500) {\n  ${truncate};\n  return (${getOuterHTMLSnippetRawString})(element, ignoreAttrs, snippetCharacterLimit);\n}`;\n\n/** @type {string} */\nconst getNodeDetailsRawString = getNodeDetails.toString();\ngetNodeDetails.toString = () => `function ${names.getNodeDetails}(element) {\n  ${truncate};\n  ${getNodePath};\n  ${getNodeSelector};\n  ${getBoundingClientRect};\n  ${getOuterHTMLSnippetRawString};\n  ${getNodeLabelRawString};\n  return (${getNodeDetailsRawString})(element);\n}`;\n\nexport const pageFunctions = {\n  wrapRuntimeEvalErrorInBrowser,\n  getElementsInDocument,\n  getOuterHTMLSnippet,\n  computeBenchmarkIndex,\n  getNodeDetails,\n  getNodePath,\n  getNodeSelector,\n  getNodeLabel,\n  isPositionFixed,\n  wrapRequestIdleCallback,\n  getBoundingClientRect,\n  truncate,\n  esbuildFunctionWrapperString,\n  getRuntimeFunctionName,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* global window */\n\nimport * as LH from '../../../types/lh.js';\nimport {pageFunctions} from '../../lib/page-functions.js';\n\nclass ExecutionContext {\n  /** @param {LH.Gatherer.ProtocolSession} session */\n  constructor(session) {\n    this._session = session;\n\n    /** @type {number|undefined} */\n    this._executionContextId = undefined;\n    /**\n     * Marks how many execution context ids have been created, for purposes of having a unique\n     * value (that doesn't expose the actual execution context id) to\n     * use for __lighthouseExecutionContextUniqueIdentifier.\n     * @type {number}\n     */\n    this._executionContextIdentifiersCreated = 0;\n\n    // We use isolated execution contexts for `evaluateAsync` that can be destroyed through navigation\n    // and other page actions. Cleanup our relevant bookkeeping as we see those events.\n    // Domains are enabled when a dedicated execution context is requested.\n    session.on('Page.frameNavigated', () => this.clearContextId());\n    session.on('Runtime.executionContextDestroyed', event => {\n      if (event.executionContextId === this._executionContextId) {\n        this.clearContextId();\n      }\n    });\n  }\n\n  /**\n   * Returns the isolated context ID currently in use.\n   */\n  getContextId() {\n    return this._executionContextId;\n  }\n\n  /**\n   * Clears the remembered context ID. Use this method when we have knowledge that the runtime context\n   * we were using has been destroyed by the browser and is no longer available.\n   */\n  clearContextId() {\n    this._executionContextId = undefined;\n  }\n\n  /**\n   * Returns the cached isolated execution context ID or creates a new execution context for the main\n   * frame. The cached execution context is cleared on every gotoURL invocation, so a new one will\n   * always be created on the first call on a new page.\n   * @return {Promise<number>}\n   */\n  async _getOrCreateIsolatedContextId() {\n    if (typeof this._executionContextId === 'number') return this._executionContextId;\n\n    await this._session.sendCommand('Page.enable');\n    await this._session.sendCommand('Runtime.enable');\n\n    const frameTreeResponse = await this._session.sendCommand('Page.getFrameTree');\n    const mainFrameId = frameTreeResponse.frameTree.frame.id;\n\n    const isolatedWorldResponse = await this._session.sendCommand('Page.createIsolatedWorld', {\n      frameId: mainFrameId,\n      worldName: 'lighthouse_isolated_context',\n    });\n\n    this._executionContextId = isolatedWorldResponse.executionContextId;\n    this._executionContextIdentifiersCreated++;\n    return isolatedWorldResponse.executionContextId;\n  }\n\n  /**\n   * Evaluate an expression in the given execution context; an undefined contextId implies the main\n   * page without isolation.\n   * @param {string} expression\n   * @param {number|undefined} contextId\n   * @param {number} timeout\n   * @return {Promise<*>}\n   */\n  async _evaluateInContext(expression, contextId, timeout) {\n    // `__lighthouseExecutionContextUniqueIdentifier` is only used by the FullPageScreenshot gatherer.\n    // See `getNodeDetails` in page-functions.\n    const uniqueExecutionContextIdentifier = contextId === undefined ?\n      undefined :\n      this._executionContextIdentifiersCreated;\n\n    const evaluationParams = {\n      // We need to explicitly wrap the raw expression for several purposes:\n      // 1. Ensure that the expression will be a native Promise and not a polyfill/non-Promise.\n      // 2. Ensure that errors in the expression are captured by the Promise.\n      // 3. Ensure that errors captured in the Promise are converted into plain-old JS Objects\n      //    so that they can be serialized properly b/c JSON.stringify(new Error('foo')) === '{}'\n      //\n      // `__lighthouseExecutionContextUniqueIdentifier` is only used by the FullPageScreenshot gatherer.\n      // See `getNodeDetails` in page-functions.\n      expression: `(function wrapInNativePromise() {\n        ${ExecutionContext._cachedNativesPreamble};\n        globalThis.__lighthouseExecutionContextUniqueIdentifier =\n          ${uniqueExecutionContextIdentifier};\n        ${pageFunctions.esbuildFunctionWrapperString}\n        return new Promise(function (resolve) {\n          return Promise.resolve()\n            .then(_ => ${expression})\n            .catch(${pageFunctions.wrapRuntimeEvalErrorInBrowser})\n            .then(resolve);\n        });\n      }())\n      //# sourceURL=_lighthouse-eval.js`,\n      includeCommandLineAPI: true,\n      awaitPromise: true,\n      returnByValue: true,\n      timeout,\n      contextId,\n    };\n\n    this._session.setNextProtocolTimeout(timeout);\n    const response = await this._session.sendCommand('Runtime.evaluate', evaluationParams);\n\n    const ex = response.exceptionDetails;\n    if (ex) {\n      // An error occurred before we could even create a Promise, should be *very* rare.\n      // Also occurs when the expression is not valid JavaScript.\n      const elidedExpression = expression.replace(/\\s+/g, ' ').substring(0, 100);\n      const messageLines = [\n        'Runtime.evaluate exception',\n        `Expression: ${elidedExpression}\\n---- (elided)`,\n        !ex.stackTrace ? `Parse error at: ${ex.lineNumber + 1}:${ex.columnNumber + 1}` : null,\n        ex.exception?.description || ex.text,\n      ].filter(Boolean);\n      const evaluationError = new Error(messageLines.join('\\n'));\n      return Promise.reject(evaluationError);\n    }\n\n    // Protocol should always return a 'result' object, but it is sometimes undefined.  See #6026.\n    if (response.result === undefined) {\n      return Promise.reject(\n        new Error('Runtime.evaluate response did not contain a \"result\" object'));\n    }\n    const value = response.result.value;\n    if (value?.__failedInBrowser) {\n      return Promise.reject(Object.assign(new Error(), value));\n    } else {\n      return value;\n    }\n  }\n\n  /**\n   * Note: Prefer `evaluate` instead.\n   * Evaluate an expression in the context of the current page. If useIsolation is true, the expression\n   * will be evaluated in a content script that has access to the page's DOM but whose JavaScript state\n   * is completely separate.\n   * Returns a promise that resolves on the expression's value.\n   * @param {string} expression\n   * @param {{useIsolation?: boolean}=} options\n   * @return {Promise<*>}\n   */\n  async evaluateAsync(expression, options = {}) {\n    // Use a higher than default timeout if the user hasn't specified a specific timeout.\n    // Otherwise, use whatever was requested.\n    const timeout = this._session.hasNextProtocolTimeout() ?\n      this._session.getNextProtocolTimeout() :\n      60000;\n    const contextId = options.useIsolation ? await this._getOrCreateIsolatedContextId() : undefined;\n\n    try {\n      // `await` is not redundant here because we want to `catch` the async errors\n      return await this._evaluateInContext(expression, contextId, timeout);\n    } catch (err) {\n      // If we were using isolation and the context disappeared on us, retry one more time.\n      if (contextId && err.message.includes('Cannot find context')) {\n        this.clearContextId();\n        const freshContextId = await this._getOrCreateIsolatedContextId();\n        return this._evaluateInContext(expression, freshContextId, timeout);\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Evaluate a function in the context of the current page.\n   * If `useIsolation` is true, the function will be evaluated in a content script that has\n   * access to the page's DOM but whose JavaScript state is completely separate.\n   * Returns a promise that resolves on a value of `mainFn`'s return type.\n   * @template {unknown[]} T, R\n   * @param {((...args: T) => R)} mainFn The main function to call.\n   * @param {{args: T, useIsolation?: boolean, deps?: Array<Function|string>}} options `args` should\n   *   match the args of `mainFn`, and can be any serializable value. `deps` are functions that must be\n   *   defined for `mainFn` to work.\n   * @return {Promise<Awaited<R>>}\n   */\n  evaluate(mainFn, options) {\n    const argsSerialized = ExecutionContext.serializeArguments(options.args);\n    const depsSerialized = ExecutionContext.serializeDeps(options.deps);\n\n    const expression = `(() => {\n      ${depsSerialized}\n      return (${mainFn})(${argsSerialized});\n    })()`;\n    return this.evaluateAsync(expression, options);\n  }\n\n  /**\n   * Evaluate a function on every new frame from now on.\n   * @template {unknown[]} T\n   * @param {((...args: T) => void)} mainFn The main function to call.\n   * @param {{args: T, deps?: Array<Function|string>}} options `args` should\n   *   match the args of `mainFn`, and can be any serializable value. `deps` are functions that must be\n   *   defined for `mainFn` to work.\n   * @return {Promise<void>}\n   */\n  async evaluateOnNewDocument(mainFn, options) {\n    const argsSerialized = ExecutionContext.serializeArguments(options.args);\n    const depsSerialized = ExecutionContext.serializeDeps(options.deps);\n\n    const expression = `(() => {\n      ${ExecutionContext._cachedNativesPreamble};\n      ${depsSerialized};\n      (${mainFn})(${argsSerialized});\n    })()\n    //# sourceURL=_lighthouse-eval.js`;\n\n    await this._session.sendCommand('Page.addScriptToEvaluateOnNewDocument', {source: expression});\n  }\n\n  /**\n   * Cache native functions/objects inside window so we are sure polyfills do not overwrite the\n   * native implementations when the page loads.\n   * @return {Promise<void>}\n   */\n  async cacheNativesOnNewDocument() {\n    await this.evaluateOnNewDocument(() => {\n      /* c8 ignore start */\n      window.__nativePromise = window.Promise;\n      window.__nativeURL = window.URL;\n      window.__nativePerformance = window.performance;\n      window.__nativeFetch = window.fetch;\n      window.__ElementMatches = window.Element.prototype.matches;\n      window.__HTMLElementBoundingClientRect = window.HTMLElement.prototype.getBoundingClientRect;\n      /* c8 ignore stop */\n    }, {args: []});\n  }\n\n  /**\n   * Prefix every script evaluation with a shadowing of common globals that tend to be ponyfilled\n   * incorrectly by many sites. This allows functions to still refer to `Promise` instead of\n   * Lighthouse-specific backups like `__nativePromise` (injected by `cacheNativesOnNewDocument` above).\n   */\n  static _cachedNativesPreamble = [\n    'const Promise = globalThis.__nativePromise || globalThis.Promise',\n    'const URL = globalThis.__nativeURL || globalThis.URL',\n    'const performance = globalThis.__nativePerformance || globalThis.performance',\n    'const fetch = globalThis.__nativeFetch || globalThis.fetch',\n  ].join(';\\n');\n\n  /**\n   * Serializes an array of arguments for use in an `eval` string across the protocol.\n   * @param {unknown[]} args\n   * @return {string}\n   */\n  static serializeArguments(args) {\n    return args.map(arg => arg === undefined ? 'undefined' : JSON.stringify(arg)).join(',');\n  }\n\n  /**\n   * Serializes an array of functions or strings.\n   *\n   * Also makes sure that an esbuild-bundled version of Lighthouse will\n   * continue to create working code to be executed within the browser.\n   * @param {Array<Function|string>=} deps\n   * @return {string}\n   */\n  static serializeDeps(deps) {\n    deps = [pageFunctions.esbuildFunctionWrapperString, ...deps || []];\n    return deps.map(dep => {\n      if (typeof dep === 'function') {\n        // esbuild will change the actual function name (ie. function actualName() {})\n        // always, and preserve the real name in `actualName.name`.\n        // See esbuildFunctionWrapperString.\n        const output = dep.toString();\n        const runtimeName = pageFunctions.getRuntimeFunctionName(dep);\n        if (runtimeName !== dep.name) {\n          // In addition to exposing the mangled name, also expose the original as an alias.\n          return `${output}; const ${dep.name} = ${runtimeName};`;\n        } else {\n          return output;\n        }\n      } else {\n        return dep;\n      }\n    }).join('\\n');\n  }\n}\n\nexport {ExecutionContext};\n", "/**\n * @license Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n*/\n\n/* eslint-disable no-undef */\n\nimport {ExecutionContext} from '../../core/gather/driver/execution-context.js';\nimport {pageFunctions} from '../../core/lib/page-functions.js';\n\n/**\n *\n * @param {Function} mainFn\n * @param {any[]} args\n * @param {any[]} deps\n * @return {string}\n */\nfunction stringify(mainFn, args, deps) {\n  const argsSerialized = ExecutionContext.serializeArguments(args);\n  const depsSerialized = ExecutionContext.serializeDeps(deps);\n  const expression = `(() => {\n    ${depsSerialized}\n    return (${mainFn})(${argsSerialized});\n  })()`;\n  return expression;\n}\n\nconst fakeWindow = {};\nfakeWindow.Node = class FakeNode {\n  querySelectorAll() {\n    return [\n      Object.assign(new HTMLElement(), {innerText: 'interesting'}),\n      Object.assign(new HTMLElement(), {innerText: 'not so interesting'}),\n    ];\n  }\n};\nfakeWindow.Element = class FakeElement extends fakeWindow.Node {\n  matches() {\n    return true;\n  }\n};\nfakeWindow.HTMLElement = class FakeHTMLElement extends fakeWindow.Element {};\n\n// @ts-expect-error\nglobalThis.window = fakeWindow;\n// @ts-expect-error\nglobalThis.document = new fakeWindow.Node();\nglobalThis.HTMLElement = globalThis.window.HTMLElement;\n\n/**\n * @param {HTMLElement[]} elements\n * @return {HTMLElement[]}\n */\nfunction filterInterestingHtmlElements(elements) {\n  return elements.filter(e => e.innerText === 'interesting');\n}\n\nfunction mainFn() {\n  const el = Object.assign(new HTMLElement(), {\n    tagName: 'FakeHTMLElement',\n    innerText: 'contents',\n    classList: [],\n  });\n  /** @type {HTMLElement[]} */\n  // @ts-expect-error\n  const elements = getElementsInDocument(el);\n  return filterInterestingHtmlElements(elements);\n}\n\n// Indirect eval so code is run in global scope, and won't have incidental access to the\n// esbuild keepNames function wrapper.\nconst indirectEval = eval;\nconst result = indirectEval(stringify(mainFn, [], [\n  pageFunctions.getElementsInDocument,\n  filterInterestingHtmlElements,\n]));\nif (!result || result.length !== 1 || result[0].innerText !== 'interesting') {\n  throw new Error(`unexpected result, got ${JSON.stringify(result, null, 2)}`);\n}\n"],
  "mappings": "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",
  "names": ["e", "text", "result", "getElementsInDocument", "node", "element", "require", "mainFn", "mainFn"]
}

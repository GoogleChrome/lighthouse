{
  "version": 3,
  "sources": ["node-modules-polyfills:process", "../process-global.js", "replace-modules:module", "../../shared/statistics.js", "../../shared/util.js", "../../core/lib/page-functions.js", "../../core/gather/driver/execution-context.js", "page-functions-test-case-getNodeDetails.js"],
  "sourcesContent": ["// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\nvar cachedSetTimeout = defaultSetTimout;\nvar cachedClearTimeout = defaultClearTimeout;\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nfunction nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nvar title = 'browser';\nvar platform = 'browser';\nvar browser = true;\nvar env = {};\nvar argv = [];\nvar version = ''; // empty string to avoid regexp issues\nvar versions = {};\nvar release = {};\nvar config = {};\n\nfunction noop() {}\n\nvar on = noop;\nvar addListener = noop;\nvar once = noop;\nvar off = noop;\nvar removeListener = noop;\nvar removeAllListeners = noop;\nvar emit = noop;\n\nfunction binding(name) {\n    throw new Error('process.binding is not supported');\n}\n\nfunction cwd () { return '/' }\nfunction chdir (dir) {\n    throw new Error('process.chdir is not supported');\n}function umask() { return 0; }\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {};\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() };\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3;\n  var seconds = Math.floor(clocktime);\n  var nanoseconds = Math.floor((clocktime%1)*1e9);\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0];\n    nanoseconds = nanoseconds - previousTimestamp[1];\n    if (nanoseconds<0) {\n      seconds--;\n      nanoseconds += 1e9;\n    }\n  }\n  return [seconds,nanoseconds]\n}\n\nvar startTime = new Date();\nfunction uptime() {\n  var currentTime = new Date();\n  var dif = currentTime - startTime;\n  return dif / 1000;\n}\n\nvar browser$1 = {\n  nextTick: nextTick,\n  title: title,\n  browser: browser,\n  env: env,\n  argv: argv,\n  version: version,\n  versions: versions,\n  on: on,\n  addListener: addListener,\n  once: once,\n  off: off,\n  removeListener: removeListener,\n  removeAllListeners: removeAllListeners,\n  emit: emit,\n  binding: binding,\n  cwd: cwd,\n  chdir: chdir,\n  umask: umask,\n  hrtime: hrtime,\n  platform: platform,\n  release: release,\n  config: config,\n  uptime: uptime\n};\n\nexport { addListener, argv, binding, browser, chdir, config, cwd, browser$1 as default, emit, env, hrtime, nextTick, off, on, once, platform, release, removeAllListeners, removeListener, title, umask, uptime, version, versions };\n", "import process from 'process';\n\n// eslint-disable-next-line no-undef\nglobalThis.process = process;\n", "\n          export const createRequire = () => {\n            return {\n              resolve() {\n                throw new Error('createRequire.resolve is not supported in bundled Lighthouse');\n              },\n            };\n          };\n        ", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// The exact double values for the max and min scores possible in each range.\nconst MIN_PASSING_SCORE = 0.90000000000000002220446049250313080847263336181640625;\nconst MAX_AVERAGE_SCORE = 0.899999999999999911182158029987476766109466552734375;\nconst MIN_AVERAGE_SCORE = 0.5;\nconst MAX_FAILING_SCORE = 0.499999999999999944488848768742172978818416595458984375;\n\n/**\n * Approximates the Gauss error function, the probability that a random variable\n * from the standard normal distribution lies within [-x, x]. Moved from\n * traceviewer.b.math.erf, based on Abramowitz and Stegun, formula 7.1.26.\n * @param {number} x\n * @return {number}\n */\nfunction erf(x) {\n  // erf(-x) = -erf(x);\n  const sign = Math.sign(x);\n  x = Math.abs(x);\n\n  const a1 = 0.254829592;\n  const a2 = -0.284496736;\n  const a3 = 1.421413741;\n  const a4 = -1.453152027;\n  const a5 = 1.061405429;\n  const p = 0.3275911;\n  const t = 1 / (1 + p * x);\n  const y = t * (a1 + t * (a2 + t * (a3 + t * (a4 + t * a5))));\n  return sign * (1 - y * Math.exp(-x * x));\n}\n\n/**\n * Returns the score (1 - percentile) of `value` in a log-normal distribution\n * specified by the `median` value, at which the score will be 0.5, and a 10th\n * percentile value, at which the score will be 0.9. The score represents the\n * amount of the distribution greater than `value`. All values should be in the\n * same units (e.g. milliseconds). See\n *   https://www.desmos.com/calculator/o98tbeyt1t\n * for an interactive view of the relationship between these parameters and the\n * typical parameterization (location and shape) of the log-normal distribution.\n * @param {{median: number, p10: number}} parameters\n * @param {number} value\n * @return {number}\n */\nfunction getLogNormalScore({median, p10}, value) {\n  // Required for the log-normal distribution.\n  if (median <= 0) throw new Error('median must be greater than zero');\n  if (p10 <= 0) throw new Error('p10 must be greater than zero');\n  // Not strictly required, but if p10 > median, it flips around and becomes the p90 point.\n  if (p10 >= median) throw new Error('p10 must be less than the median');\n\n  // Non-positive values aren't in the distribution, so always 1.\n  if (value <= 0) return 1;\n\n  // Closest double to `erfc-1(1/5)`.\n  const INVERSE_ERFC_ONE_FIFTH = 0.9061938024368232;\n\n  // Shape (σ) is `|log(p10/median) / (sqrt(2)*erfc^-1(1/5))|` and\n  // standardizedX is `1/2 erfc(log(value/median) / (sqrt(2)*σ))`, so simplify a bit.\n  const xRatio = Math.max(Number.MIN_VALUE, value / median); // value and median are > 0, so is ratio.\n  const xLogRatio = Math.log(xRatio);\n  const p10Ratio = Math.max(Number.MIN_VALUE, p10 / median); // p10 and median are > 0, so is ratio.\n  const p10LogRatio = -Math.log(p10Ratio); // negate to keep σ positive.\n  const standardizedX = xLogRatio * INVERSE_ERFC_ONE_FIFTH / p10LogRatio;\n  const complementaryPercentile = (1 - erf(standardizedX)) / 2;\n\n  // Clamp to avoid floating-point out-of-bounds issues and keep score in expected range.\n  let score;\n  if (value <= p10) {\n    // Passing. Clamp to [0.9, 1].\n    score = Math.max(MIN_PASSING_SCORE, Math.min(1, complementaryPercentile));\n  } else if (value <= median) {\n    // Average. Clamp to [0.5, 0.9).\n    score = Math.max(MIN_AVERAGE_SCORE, Math.min(MAX_AVERAGE_SCORE, complementaryPercentile));\n  } else {\n    // Failing. Clamp to [0, 0.5).\n    score = Math.max(0, Math.min(MAX_FAILING_SCORE, complementaryPercentile));\n  }\n  return score;\n}\n\n/**\n * Interpolates the y value at a point x on the line defined by (x0, y0) and (x1, y1)\n * @param {number} x0\n * @param {number} y0\n * @param {number} x1\n * @param {number} y1\n * @param {number} x\n * @return {number}\n */\nfunction linearInterpolation(x0, y0, x1, y1, x) {\n  const slope = (y1 - y0) / (x1 - x0);\n  return y0 + (x - x0) * slope;\n}\n\nexport {\n  linearInterpolation,\n  getLogNormalScore,\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as statistics from './statistics.js';\n\n/** @typedef {import('../types/lhr/audit-details').default.SnippetValue} SnippetValue */\n\nconst ELLIPSIS = '\\u2026';\nconst NBSP = '\\xa0';\nconst PASS_THRESHOLD = 0.9;\n\nconst RATINGS = {\n  PASS: {label: 'pass', minScore: PASS_THRESHOLD},\n  AVERAGE: {label: 'average', minScore: 0.5},\n  FAIL: {label: 'fail'},\n  ERROR: {label: 'error'},\n};\n\n// 25 most used tld plus one domains (aka public suffixes) from http archive.\n// @see https://github.com/GoogleChrome/lighthouse/pull/5065#discussion_r191926212\n// The canonical list is https://publicsuffix.org/learn/ but we're only using subset to conserve bytes\nconst listOfTlds = [\n  'com', 'co', 'gov', 'edu', 'ac', 'org', 'go', 'gob', 'or', 'net', 'in', 'ne', 'nic', 'gouv',\n  'web', 'spb', 'blog', 'jus', 'kiev', 'mil', 'wi', 'qc', 'ca', 'bel', 'on',\n];\n\nclass Util {\n  static get RATINGS() {\n    return RATINGS;\n  }\n\n  static get PASS_THRESHOLD() {\n    return PASS_THRESHOLD;\n  }\n\n  static get MS_DISPLAY_VALUE() {\n    return `%10d${NBSP}ms`;\n  }\n\n  /**\n   * If LHR is older than 10.0 it will not have the `finalDisplayedUrl` property.\n   * Old LHRs should have the `finalUrl` property which will work fine for the report.\n   *\n   * @param {LH.Result} lhr\n   */\n  static getFinalDisplayedUrl(lhr) {\n    if (lhr.finalDisplayedUrl) return lhr.finalDisplayedUrl;\n    if (lhr.finalUrl) return lhr.finalUrl;\n    throw new Error('Could not determine final displayed URL');\n  }\n\n  /**\n   * If LHR is older than 10.0 it will not have the `mainDocumentUrl` property.\n   * Old LHRs should have the `finalUrl` property which is the same as `mainDocumentUrl`.\n   *\n   * @param {LH.Result} lhr\n   */\n  static getMainDocumentUrl(lhr) {\n    return lhr.mainDocumentUrl || lhr.finalUrl;\n  }\n\n  /**\n   * @param {LH.Result} lhr\n   * @return {LH.Result.FullPageScreenshot=}\n   */\n  static getFullPageScreenshot(lhr) {\n    if (lhr.fullPageScreenshot) {\n      return lhr.fullPageScreenshot;\n    }\n\n    // Prior to 10.0.\n    const details = /** @type {LH.Result.FullPageScreenshot=} */ (\n      lhr.audits['full-page-screenshot']?.details);\n    return details;\n  }\n\n  /**\n   * Given the entity classification dataset and a URL, identify the entity.\n   * @param {string} url\n   * @param {LH.Result.Entities=} entities\n   * @return {LH.Result.LhrEntity|string}\n   */\n  static getEntityFromUrl(url, entities) {\n    // If it's a pre-v10 LHR, we don't have entities, so match against the root-ish domain\n    if (!entities) {\n      return Util.getPseudoRootDomain(url);\n    }\n\n    const entity = entities.find(e => e.origins.find(origin => url.startsWith(origin)));\n    // This fallback case would be unexpected, but leaving for safety.\n    return entity || Util.getPseudoRootDomain(url);\n  }\n\n  /**\n   * Split a string by markdown code spans (enclosed in `backticks`), splitting\n   * into segments that were enclosed in backticks (marked as `isCode === true`)\n   * and those that outside the backticks (`isCode === false`).\n   * @param {string} text\n   * @return {Array<{isCode: true, text: string}|{isCode: false, text: string}>}\n   */\n  static splitMarkdownCodeSpans(text) {\n    /** @type {Array<{isCode: true, text: string}|{isCode: false, text: string}>} */\n    const segments = [];\n\n    // Split on backticked code spans.\n    const parts = text.split(/`(.*?)`/g);\n    for (let i = 0; i < parts.length; i ++) {\n      const text = parts[i];\n\n      // Empty strings are an artifact of splitting, not meaningful.\n      if (!text) continue;\n\n      // Alternates between plain text and code segments.\n      const isCode = i % 2 !== 0;\n      segments.push({\n        isCode,\n        text,\n      });\n    }\n\n    return segments;\n  }\n\n  /**\n   * Split a string on markdown links (e.g. [some link](https://...)) into\n   * segments of plain text that weren't part of a link (marked as\n   * `isLink === false`), and segments with text content and a URL that did make\n   * up a link (marked as `isLink === true`).\n   * @param {string} text\n   * @return {Array<{isLink: true, text: string, linkHref: string}|{isLink: false, text: string}>}\n   */\n  static splitMarkdownLink(text) {\n    /** @type {Array<{isLink: true, text: string, linkHref: string}|{isLink: false, text: string}>} */\n    const segments = [];\n\n    const parts = text.split(/\\[([^\\]]+?)\\]\\((https?:\\/\\/.*?)\\)/g);\n    while (parts.length) {\n      // Shift off the same number of elements as the pre-split and capture groups.\n      const [preambleText, linkText, linkHref] = parts.splice(0, 3);\n\n      if (preambleText) { // Skip empty text as it's an artifact of splitting, not meaningful.\n        segments.push({\n          isLink: false,\n          text: preambleText,\n        });\n      }\n\n      // Append link if there are any.\n      if (linkText && linkHref) {\n        segments.push({\n          isLink: true,\n          text: linkText,\n          linkHref,\n        });\n      }\n    }\n\n    return segments;\n  }\n\n  /**\n   * @param {string} string\n   * @param {number} characterLimit\n   * @param {string} ellipseSuffix\n   */\n  static truncate(string, characterLimit, ellipseSuffix = '…') {\n    // Early return for the case where there are fewer bytes than the character limit.\n    if (string.length <= characterLimit) {\n      return string;\n    }\n\n    const segmenter = new Intl.Segmenter(undefined, {granularity: 'grapheme'});\n    const iterator = segmenter.segment(string)[Symbol.iterator]();\n\n    let lastSegmentIndex = 0;\n    for (let i = 0; i <= characterLimit - ellipseSuffix.length; i++) {\n      const result = iterator.next();\n      if (result.done) {\n        return string;\n      }\n\n      lastSegmentIndex = result.value.index;\n    }\n\n    for (let i = 0; i < ellipseSuffix.length; i++) {\n      if (iterator.next().done) {\n        return string;\n      }\n    }\n\n    return string.slice(0, lastSegmentIndex) + ellipseSuffix;\n  }\n\n  /**\n   * @param {URL} parsedUrl\n   * @param {{numPathParts?: number, preserveQuery?: boolean, preserveHost?: boolean}=} options\n   * @return {string}\n   */\n  static getURLDisplayName(parsedUrl, options) {\n    // Closure optional properties aren't optional in tsc, so fallback needs undefined  values.\n    options = options || {numPathParts: undefined, preserveQuery: undefined,\n      preserveHost: undefined};\n    const numPathParts = options.numPathParts !== undefined ? options.numPathParts : 2;\n    const preserveQuery = options.preserveQuery !== undefined ? options.preserveQuery : true;\n    const preserveHost = options.preserveHost || false;\n\n    let name;\n\n    if (parsedUrl.protocol === 'about:' || parsedUrl.protocol === 'data:') {\n      // Handle 'about:*' and 'data:*' URLs specially since they have no path.\n      name = parsedUrl.href;\n    } else {\n      name = parsedUrl.pathname;\n      const parts = name.split('/').filter(part => part.length);\n      if (numPathParts && parts.length > numPathParts) {\n        name = ELLIPSIS + parts.slice(-1 * numPathParts).join('/');\n      }\n\n      if (preserveHost) {\n        name = `${parsedUrl.host}/${name.replace(/^\\//, '')}`;\n      }\n      if (preserveQuery) {\n        name = `${name}${parsedUrl.search}`;\n      }\n    }\n\n    const MAX_LENGTH = 64;\n    if (parsedUrl.protocol !== 'data:') {\n      // Even non-data uris can be 10k characters long.\n      name = name.slice(0, 200);\n      // Always elide hexadecimal hash\n      name = name.replace(/([a-f0-9]{7})[a-f0-9]{13}[a-f0-9]*/g, `$1${ELLIPSIS}`);\n      // Also elide other hash-like mixed-case strings\n      name = name.replace(/([a-zA-Z0-9-_]{9})(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9-_]{10,}/g,\n        `$1${ELLIPSIS}`);\n      // Also elide long number sequences\n      name = name.replace(/(\\d{3})\\d{6,}/g, `$1${ELLIPSIS}`);\n      // Merge any adjacent ellipses\n      name = name.replace(/\\u2026+/g, ELLIPSIS);\n\n      // Elide query params first\n      if (name.length > MAX_LENGTH && name.includes('?')) {\n        // Try to leave the first query parameter intact\n        name = name.replace(/\\?([^=]*)(=)?.*/, `?$1$2${ELLIPSIS}`);\n\n        // Remove it all if it's still too long\n        if (name.length > MAX_LENGTH) {\n          name = name.replace(/\\?.*/, `?${ELLIPSIS}`);\n        }\n      }\n    }\n\n    // Elide too long names next\n    if (name.length > MAX_LENGTH) {\n      const dotIndex = name.lastIndexOf('.');\n      if (dotIndex >= 0) {\n        name = name.slice(0, MAX_LENGTH - 1 - (name.length - dotIndex)) +\n          // Show file extension\n          `${ELLIPSIS}${name.slice(dotIndex)}`;\n      } else {\n        name = name.slice(0, MAX_LENGTH - 1) + ELLIPSIS;\n      }\n    }\n\n    return name;\n  }\n\n  /**\n   * Returns the origin portion of a Chrome extension URL.\n   * @param {string} url\n   * @return {string}\n   */\n  static getChromeExtensionOrigin(url) {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol + '//' + parsedUrl.host;\n  }\n\n  /**\n   * Split a URL into a file, hostname and origin for easy display.\n   * @param {string} url\n   * @return {{file: string, hostname: string, origin: string}}\n   */\n  static parseURL(url) {\n    const parsedUrl = new URL(url);\n    return {\n      file: Util.getURLDisplayName(parsedUrl),\n      hostname: parsedUrl.hostname,\n      // Node's URL parsing behavior is different than Chrome and returns 'null'\n      // for chrome-extension:// URLs. See https://github.com/nodejs/node/issues/21955.\n      origin: parsedUrl.protocol === 'chrome-extension:' ?\n        Util.getChromeExtensionOrigin(url) : parsedUrl.origin,\n    };\n  }\n\n  /**\n   * @param {string|URL} value\n   * @return {!URL}\n   */\n  static createOrReturnURL(value) {\n    if (value instanceof URL) {\n      return value;\n    }\n\n    return new URL(value);\n  }\n\n  /**\n   * Gets the tld of a domain\n   * This function is used only while rendering pre-10.0 LHRs.\n   *\n   * @param {string} hostname\n   * @return {string} tld\n   */\n  static getPseudoTld(hostname) {\n    const tlds = hostname.split('.').slice(-2);\n\n    if (!listOfTlds.includes(tlds[0])) {\n      return `.${tlds[tlds.length - 1]}`;\n    }\n\n    return `.${tlds.join('.')}`;\n  }\n\n  /**\n   * Returns a primary domain for provided hostname (e.g. www.example.com -> example.com).\n   * As it doesn't consult the Public Suffix List, it can sometimes lose detail.\n   * See the `listOfTlds` comment above for more.\n   * This function is used only while rendering pre-10.0 LHRs. See UrlUtils.getRootDomain\n   * for the current method that makes use of PSL.\n   * @param {string|URL} url hostname or URL object\n   * @return {string}\n   */\n  static getPseudoRootDomain(url) {\n    const hostname = Util.createOrReturnURL(url).hostname;\n    const tld = Util.getPseudoTld(hostname);\n\n    // tld is .com or .co.uk which means we means that length is 1 to big\n    // .com => 2 & .co.uk => 3\n    const splitTld = tld.split('.');\n\n    // get TLD + root domain\n    return hostname.split('.').slice(-splitTld.length).join('.');\n  }\n\n  /**\n   * Returns only lines that are near a message, or the first few lines if there are\n   * no line messages.\n   * @param {SnippetValue['lines']} lines\n   * @param {SnippetValue['lineMessages']} lineMessages\n   * @param {number} surroundingLineCount Number of lines to include before and after\n   * the message. If this is e.g. 2 this function might return 5 lines.\n   */\n  static filterRelevantLines(lines, lineMessages, surroundingLineCount) {\n    if (lineMessages.length === 0) {\n      // no lines with messages, just return the first bunch of lines\n      return lines.slice(0, surroundingLineCount * 2 + 1);\n    }\n\n    const minGapSize = 3;\n    const lineNumbersToKeep = new Set();\n    // Sort messages so we can check lineNumbersToKeep to see how big the gap to\n    // the previous line is.\n    lineMessages = lineMessages.sort((a, b) => (a.lineNumber || 0) - (b.lineNumber || 0));\n    lineMessages.forEach(({lineNumber}) => {\n      let firstSurroundingLineNumber = lineNumber - surroundingLineCount;\n      let lastSurroundingLineNumber = lineNumber + surroundingLineCount;\n\n      while (firstSurroundingLineNumber < 1) {\n        // make sure we still show (surroundingLineCount * 2 + 1) lines in total\n        firstSurroundingLineNumber++;\n        lastSurroundingLineNumber++;\n      }\n      // If only a few lines would be omitted normally then we prefer to include\n      // extra lines to avoid the tiny gap\n      if (lineNumbersToKeep.has(firstSurroundingLineNumber - minGapSize - 1)) {\n        firstSurroundingLineNumber -= minGapSize;\n      }\n      for (let i = firstSurroundingLineNumber; i <= lastSurroundingLineNumber; i++) {\n        const surroundingLineNumber = i;\n        lineNumbersToKeep.add(surroundingLineNumber);\n      }\n    });\n\n    return lines.filter(line => lineNumbersToKeep.has(line.lineNumber));\n  }\n\n  /**\n   * Computes a score between 0 and 1 based on the measured `value`. Score is determined by\n   * considering a log-normal distribution governed by two control points (the 10th\n   * percentile value and the median value) and represents the percentage of sites that are\n   * greater than `value`.\n   *\n   * Score characteristics:\n   * - within [0, 1]\n   * - rounded to two digits\n   * - value must meet or beat a controlPoint value to meet or exceed its percentile score:\n   *   - value > median will give a score < 0.5; value ≤ median will give a score ≥ 0.5.\n   *   - value > p10 will give a score < 0.9; value ≤ p10 will give a score ≥ 0.9.\n   * - values < p10 will get a slight boost so a score of 1 is achievable by a\n   *   `value` other than those close to 0. Scores of > ~0.99524 end up rounded to 1.\n   * @param {{median: number, p10: number}} controlPoints\n   * @param {number} value\n   * @return {number}\n   */\n  static computeLogNormalScore(controlPoints, value) {\n    let percentile = statistics.getLogNormalScore(controlPoints, value);\n    // Add a boost to scores of 90+, linearly ramping from 0 at 0.9 to half a\n    // point (0.005) at 1. Expands scores in (0.9, 1] to (0.9, 1.005], so more top\n    // scores will be a perfect 1 after the two-digit `Math.floor()` rounding below.\n    if (percentile > 0.9) { // getLogNormalScore ensures `percentile` can't exceed 1.\n      percentile += 0.05 * (percentile - 0.9);\n    }\n    return Math.floor(percentile * 100) / 100;\n  }\n}\n\nexport {\n  Util,\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {createRequire} from 'module';\n\nimport {Util} from '../../shared/util.js';\n\n/**\n * @fileoverview\n * Helper functions that are passed by `toString()` by Driver to be evaluated in target page.\n *\n * Every function in this module only runs in the browser, so it is ignored from\n * the c8 code coverage tool. See c8.sh\n *\n * Important: this module should only be imported like this:\n *     const pageFunctions = require('...');\n * Never like this:\n *     const {justWhatINeed} = require('...');\n * Otherwise, minification will mangle the variable names and break usage.\n */\n\n/**\n * `typed-query-selector`'s CSS selector parser.\n * @template {string} T\n * @typedef {import('typed-query-selector/parser').ParseSelector<T>} ParseSelector\n */\n\n/* global window document Node ShadowRoot HTMLElement */\n\n/**\n * The `exceptionDetails` provided by the debugger protocol does not contain the useful\n * information such as name, message, and stack trace of the error when it's wrapped in a\n * promise. Instead, map to a successful object that contains this information.\n * @param {string|Error} [err] The error to convert\n * @return {{__failedInBrowser: boolean, name: string, message: string, stack: string|undefined}}\n */\nfunction wrapRuntimeEvalErrorInBrowser(err) {\n  if (!err || typeof err === 'string') {\n    err = new Error(err);\n  }\n\n  return {\n    __failedInBrowser: true,\n    name: err.name || 'Error',\n    message: err.message || 'unknown error',\n    stack: err.stack,\n  };\n}\n\n/**\n * @template {string} T\n * @param {T=} selector Optional simple CSS selector to filter nodes on.\n *     Combinators are not supported.\n * @return {Array<ParseSelector<T>>}\n */\nfunction getElementsInDocument(selector) {\n  const realMatchesFn = window.__ElementMatches || window.Element.prototype.matches;\n  /** @type {Array<ParseSelector<T>>} */\n  const results = [];\n\n  /** @param {NodeListOf<Element>} nodes */\n  const _findAllElements = nodes => {\n    for (const el of nodes) {\n      if (!selector || realMatchesFn.call(el, selector)) {\n        /** @type {ParseSelector<T>} */\n        // @ts-expect-error - el is verified as matching above, tsc just can't verify it through the .call().\n        const matchedEl = el;\n        results.push(matchedEl);\n      }\n\n      // If the element has a shadow root, dig deeper.\n      if (el.shadowRoot) {\n        _findAllElements(el.shadowRoot.querySelectorAll('*'));\n      }\n    }\n  };\n  _findAllElements(document.querySelectorAll('*'));\n\n  return results;\n}\n\n/**\n * Gets the opening tag text of the given node.\n * @param {Element|ShadowRoot} element\n * @param {Array<string>=} ignoreAttrs An optional array of attribute tags to not include in the HTML snippet.\n * @return {string}\n */\nfunction getOuterHTMLSnippet(element, ignoreAttrs = [], snippetCharacterLimit = 500) {\n  const ATTRIBUTE_CHAR_LIMIT = 75;\n  // Autofill information that is injected into the snippet via AutofillShowTypePredictions\n  // TODO(paulirish): Don't clean title attribute from all elements if it's unnecessary\n  const autoFillIgnoreAttrs = ['autofill-information', 'autofill-prediction', 'title'];\n\n  // ShadowRoots are sometimes passed in; use their hosts' outerHTML.\n  if (element instanceof ShadowRoot) {\n    element = element.host;\n  }\n\n  try {\n    /** @type {Element} */\n    // @ts-expect-error - clone will be same type as element - see https://github.com/microsoft/TypeScript/issues/283\n    const clone = element.cloneNode();\n\n    // Prevent any potential side-effects by appending to a template element.\n    // See https://github.com/GoogleChrome/lighthouse/issues/11465\n    const template = element.ownerDocument.createElement('template');\n    template.content.append(clone);\n    ignoreAttrs.concat(autoFillIgnoreAttrs).forEach(attribute =>{\n      clone.removeAttribute(attribute);\n    });\n    let charCount = 0;\n    for (const attributeName of clone.getAttributeNames()) {\n      if (charCount > snippetCharacterLimit) {\n        clone.removeAttribute(attributeName);\n        continue;\n      }\n\n      let attributeValue = clone.getAttribute(attributeName);\n      if (attributeValue === null) continue; // Can't happen.\n\n      let dirty = false;\n\n      // Replace img.src with img.currentSrc. Same for audio and video.\n      if (attributeName === 'src' && 'currentSrc' in element) {\n        const elementWithSrc = /** @type {HTMLImageElement|HTMLMediaElement} */ (element);\n        const currentSrc = elementWithSrc.currentSrc;\n        // Only replace if the two URLs do not resolve to the same location.\n        const documentHref = elementWithSrc.ownerDocument.location.href;\n        if (new URL(attributeValue, documentHref).toString() !== currentSrc) {\n          attributeValue = currentSrc;\n          dirty = true;\n        }\n      }\n\n      // Elide attribute value if too long.\n      const truncatedString = truncate(attributeValue, ATTRIBUTE_CHAR_LIMIT);\n      if (truncatedString !== attributeValue) dirty = true;\n      attributeValue = truncatedString;\n\n      if (dirty) {\n        // Style attributes can be blocked by the CSP if they are set via `setAttribute`.\n        // If we are trying to set the style attribute, use `el.style.cssText` instead.\n        // https://github.com/GoogleChrome/lighthouse/issues/13630\n        if (attributeName === 'style') {\n          const elementWithStyle = /** @type {HTMLElement} */ (clone);\n          elementWithStyle.style.cssText = attributeValue;\n        } else {\n          clone.setAttribute(attributeName, attributeValue);\n        }\n      }\n      charCount += attributeName.length + attributeValue.length;\n    }\n\n    const reOpeningTag = /^[\\s\\S]*?>/;\n    const [match] = clone.outerHTML.match(reOpeningTag) || [];\n    if (match && charCount > snippetCharacterLimit) {\n      return match.slice(0, match.length - 1) + ' …>';\n    }\n    return match || '';\n  } catch (_) {\n    // As a last resort, fall back to localName.\n    return `<${element.localName}>`;\n  }\n}\n\n/**\n * Computes a memory/CPU performance benchmark index to determine rough device class.\n * @see https://github.com/GoogleChrome/lighthouse/issues/9085\n * @see https://docs.google.com/spreadsheets/d/1E0gZwKsxegudkjJl8Fki_sOwHKpqgXwt8aBAfuUaB8A/edit?usp=sharing\n *\n * Historically (until LH 6.3), this benchmark created a string of length 100,000 in a loop, and returned\n * the number of times per second the string can be created.\n *\n * Changes to v8 in 8.6.106 changed this number and also made Chrome more variable w.r.t GC interupts.\n * This benchmark now is a hybrid of a similar GC-heavy approach to the original benchmark and an array\n * copy benchmark.\n *\n * As of Chrome m86...\n *\n *  - 1000+ is a desktop-class device, Core i3 PC, iPhone X, etc\n *  - 800+ is a high-end Android phone, Galaxy S8, low-end Chromebook, etc\n *  - 125+ is a mid-tier Android phone, Moto G4, etc\n *  - <125 is a budget Android phone, Alcatel Ideal, Galaxy J2, etc\n * @return {number}\n */\nfunction computeBenchmarkIndex() {\n  /**\n   * The GC-heavy benchmark that creates a string of length 10000 in a loop.\n   * The returned index is the number of times per second the string can be created divided by 10.\n   * The division by 10 is to keep similar magnitudes to an earlier version of BenchmarkIndex that\n   * used a string length of 100000 instead of 10000.\n   */\n  function benchmarkIndexGC() {\n    const start = Date.now();\n    let iterations = 0;\n\n    while (Date.now() - start < 500) {\n      let s = '';\n      for (let j = 0; j < 10000; j++) s += 'a';\n      if (s.length === 1) throw new Error('will never happen, but prevents compiler optimizations');\n\n      iterations++;\n    }\n\n    const durationInSeconds = (Date.now() - start) / 1000;\n    return Math.round(iterations / 10 / durationInSeconds);\n  }\n\n  /**\n   * The non-GC-dependent benchmark that copies integers back and forth between two arrays of length 100000.\n   * The returned index is the number of times per second a copy can be made, divided by 10.\n   * The division by 10 is to keep similar magnitudes to the GC-dependent version.\n   */\n  function benchmarkIndexNoGC() {\n    const arrA = [];\n    const arrB = [];\n    for (let i = 0; i < 100000; i++) arrA[i] = arrB[i] = i;\n\n    const start = Date.now();\n    let iterations = 0;\n\n    // Some Intel CPUs have a performance cliff due to unlucky JCC instruction alignment.\n    // Two possible fixes: call Date.now less often, or manually unroll the inner loop a bit.\n    // We'll call Date.now less and only check the duration on every 10th iteration for simplicity.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=10954#c1.\n    while (iterations % 10 !== 0 || Date.now() - start < 500) {\n      const src = iterations % 2 === 0 ? arrA : arrB;\n      const tgt = iterations % 2 === 0 ? arrB : arrA;\n\n      for (let j = 0; j < src.length; j++) tgt[j] = src[j];\n\n      iterations++;\n    }\n\n    const durationInSeconds = (Date.now() - start) / 1000;\n    return Math.round(iterations / 10 / durationInSeconds);\n  }\n\n  // The final BenchmarkIndex is a simple average of the two components.\n  return (benchmarkIndexGC() + benchmarkIndexNoGC()) / 2;\n}\n\n/**\n * Adapted from DevTools' SDK.DOMNode.prototype.path\n *   https://github.com/ChromeDevTools/devtools-frontend/blob/4fff931bb/front_end/sdk/DOMModel.js#L625-L647\n * Backend: https://source.chromium.org/search?q=f:node.cc%20symbol:PrintNodePathTo&sq=&ss=chromium%2Fchromium%2Fsrc\n *\n * TODO: DevTools nodePath handling doesn't support iframes, but probably could. https://crbug.com/1127635\n * @param {Node} node\n * @return {string}\n */\nfunction getNodePath(node) {\n  // For our purposes, there's no worthwhile difference between shadow root and document fragment\n  // We can consider them entirely synonymous.\n  /** @param {Node} node @return {node is ShadowRoot} */\n  const isShadowRoot = node => node.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n  /** @param {Node} node */\n  const getNodeParent = node => isShadowRoot(node) ? node.host : node.parentNode;\n\n  /** @param {Node} node @return {number|'a'} */\n  function getNodeIndex(node) {\n    if (isShadowRoot(node)) {\n      // User-agent shadow roots get 'u'. Non-UA shadow roots get 'a'.\n      return 'a';\n    }\n    let index = 0;\n    let prevNode;\n    while (prevNode = node.previousSibling) { // eslint-disable-line no-cond-assign\n      node = prevNode;\n      // skip empty text nodes\n      if (node.nodeType === Node.TEXT_NODE && (node.nodeValue || '').trim().length === 0) continue;\n      index++;\n    }\n    return index;\n  }\n\n  /** @type {Node|null} */\n  let currentNode = node;\n  const path = [];\n  while (currentNode && getNodeParent(currentNode)) {\n    const index = getNodeIndex(currentNode);\n    path.push([index, currentNode.nodeName]);\n    currentNode = getNodeParent(currentNode);\n  }\n  path.reverse();\n  return path.join(',');\n}\n\n/**\n * @param {Element} element\n * @return {string}\n *\n * Note: CSS Selectors having no standard mechanism to describe shadow DOM piercing. So we can't.\n *\n * If the node resides within shadow DOM, the selector *only* starts from the shadow root.\n * For example, consider this img within a <section> within a shadow root..\n *  - DOM: <html> <body> <div> #shadow-root <section> <img/>\n *  - nodePath: 0,HTML,1,BODY,1,DIV,a,#document-fragment,0,SECTION,0,IMG\n *  - nodeSelector: section > img\n */\nfunction getNodeSelector(element) {\n  /**\n   * @param {Element} element\n   */\n  function getSelectorPart(element) {\n    let part = element.tagName.toLowerCase();\n    if (element.id) {\n      part += '#' + element.id;\n    } else if (element.classList.length > 0) {\n      part += '.' + element.classList[0];\n    }\n    return part;\n  }\n\n  const parts = [];\n  while (parts.length < 4) {\n    parts.unshift(getSelectorPart(element));\n    if (!element.parentElement) {\n      break;\n    }\n    element = element.parentElement;\n    if (element.tagName === 'HTML') {\n      break;\n    }\n  }\n  return parts.join(' > ');\n}\n\n/**\n * This function checks if an element or an ancestor of an element is `position:fixed`.\n * In addition we ensure that the element is capable of behaving as a `position:fixed`\n * element, checking that it lives within a scrollable ancestor.\n * @param {HTMLElement} element\n * @return {boolean}\n */\nfunction isPositionFixed(element) {\n  /**\n   * @param {HTMLElement} element\n   * @param {'overflowY'|'position'} attr\n   * @return {string}\n   */\n  function getStyleAttrValue(element, attr) {\n    // Check style before computedStyle as computedStyle is expensive.\n    return element.style[attr] || window.getComputedStyle(element)[attr];\n  }\n\n  // Position fixed/sticky has no effect in case when document does not scroll.\n  const htmlEl = document.querySelector('html');\n  if (!htmlEl) throw new Error('html element not found in document');\n  if (htmlEl.scrollHeight <= htmlEl.clientHeight ||\n      !['scroll', 'auto', 'visible'].includes(getStyleAttrValue(htmlEl, 'overflowY'))) {\n    return false;\n  }\n\n  /** @type {HTMLElement | null} */\n  let currentEl = element;\n  while (currentEl) {\n    const position = getStyleAttrValue(currentEl, 'position');\n    if ((position === 'fixed' || position === 'sticky')) {\n      return true;\n    }\n    currentEl = currentEl.parentElement;\n  }\n  return false;\n}\n\n/**\n * Generate a human-readable label for the given element, based on end-user facing\n * strings like the innerText or alt attribute.\n * Returns label string or null if no useful label is found.\n * @param {Element} element\n * @return {string | null}\n */\nfunction getNodeLabel(element) {\n  const tagName = element.tagName.toLowerCase();\n  // html and body content is too broad to be useful, since they contain all page content\n  if (tagName !== 'html' && tagName !== 'body') {\n    const nodeLabel = element instanceof HTMLElement && element.innerText ||\n        element.getAttribute('alt') || element.getAttribute('aria-label');\n    if (nodeLabel) {\n      return truncate(nodeLabel, 80);\n    } else {\n      // If no useful label was found then try to get one from a child.\n      // E.g. if an a tag contains an image but no text we want the image alt/aria-label attribute.\n      const nodeToUseForLabel = element.querySelector('[alt], [aria-label]');\n      if (nodeToUseForLabel) {\n        return getNodeLabel(nodeToUseForLabel);\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * @param {Element} element\n * @return {LH.Artifacts.Rect}\n */\nfunction getBoundingClientRect(element) {\n  const realBoundingClientRect = window.__HTMLElementBoundingClientRect ||\n    window.HTMLElement.prototype.getBoundingClientRect;\n  // The protocol does not serialize getters, so extract the values explicitly.\n  const rect = realBoundingClientRect.call(element);\n  return {\n    top: Math.round(rect.top),\n    bottom: Math.round(rect.bottom),\n    left: Math.round(rect.left),\n    right: Math.round(rect.right),\n    width: Math.round(rect.width),\n    height: Math.round(rect.height),\n  };\n}\n\n/**\n * RequestIdleCallback shim that calculates the remaining deadline time in order to avoid a potential lighthouse\n * penalty for tests run with simulated throttling. Reduces the deadline time to (50 - safetyAllowance) / cpuSlowdownMultiplier to\n * ensure a long task is very unlikely if using the API correctly.\n * @param {number} cpuSlowdownMultiplier\n */\nfunction wrapRequestIdleCallback(cpuSlowdownMultiplier) {\n  const safetyAllowanceMs = 10;\n  const maxExecutionTimeMs = Math.floor((50 - safetyAllowanceMs) / cpuSlowdownMultiplier);\n  const nativeRequestIdleCallback = window.requestIdleCallback;\n  window.requestIdleCallback = (cb, options) => {\n    /**\n     * @type {Parameters<typeof window['requestIdleCallback']>[0]}\n     */\n    const cbWrap = (deadline) => {\n      const start = Date.now();\n      // @ts-expect-error - save original on non-standard property.\n      deadline.__timeRemaining = deadline.timeRemaining;\n      deadline.timeRemaining = () => {\n        // @ts-expect-error - access non-standard property.\n        const timeRemaining = deadline.__timeRemaining();\n        return Math.min(timeRemaining, Math.max(0, maxExecutionTimeMs - (Date.now() - start))\n        );\n      };\n      deadline.timeRemaining.toString = () => {\n        return 'function timeRemaining() { [native code] }';\n      };\n      cb(deadline);\n    };\n    return nativeRequestIdleCallback(cbWrap, options);\n  };\n  window.requestIdleCallback.toString = () => {\n    return 'function requestIdleCallback() { [native code] }';\n  };\n}\n\n/**\n * @param {Element|ShadowRoot} element\n * @return {LH.Artifacts.NodeDetails}\n */\nfunction getNodeDetails(element) {\n  // This bookkeeping is for the FullPageScreenshot gatherer.\n  if (!window.__lighthouseNodesDontTouchOrAllVarianceGoesAway) {\n    window.__lighthouseNodesDontTouchOrAllVarianceGoesAway = new Map();\n  }\n\n  element = element instanceof ShadowRoot ? element.host : element;\n  const selector = getNodeSelector(element);\n\n  // Create an id that will be unique across all execution contexts.\n  //\n  // Made up of 3 components:\n  //   - prefix unique to specific execution context\n  //   - nth unique node seen by this function for this execution context\n  //   - node tagName\n  //\n  // Every page load only has up to two associated contexts - the page context\n  // (denoted as `__lighthouseExecutionContextUniqueIdentifier` being undefined)\n  // and the isolated context. The id must be unique to distinguish gatherers running\n  // on different page loads that identify the same logical element, for purposes\n  // of the full page screenshot node lookup; hence the prefix.\n  //\n  // The id could be any arbitrary string, the exact value is not important.\n  // For example, tagName is added only because it might be useful for debugging.\n  // But execution id and map size are added to ensure uniqueness.\n  // We also dedupe this id so that details collected for an element within the same\n  // pass and execution context will share the same id. Not technically important, but\n  // cuts down on some duplication.\n  let lhId = window.__lighthouseNodesDontTouchOrAllVarianceGoesAway.get(element);\n  if (!lhId) {\n    lhId = [\n      window.__lighthouseExecutionContextUniqueIdentifier === undefined ?\n        'page' :\n        window.__lighthouseExecutionContextUniqueIdentifier,\n      window.__lighthouseNodesDontTouchOrAllVarianceGoesAway.size,\n      element.tagName,\n    ].join('-');\n    window.__lighthouseNodesDontTouchOrAllVarianceGoesAway.set(element, lhId);\n  }\n\n  const details = {\n    lhId,\n    devtoolsNodePath: getNodePath(element),\n    selector: selector,\n    boundingRect: getBoundingClientRect(element),\n    snippet: getOuterHTMLSnippet(element),\n    nodeLabel: getNodeLabel(element) || selector,\n  };\n\n  return details;\n}\n\n/**\n *\n * @param {string} string\n * @param {number} characterLimit\n * @return {string}\n */\nfunction truncate(string, characterLimit) {\n  return Util.truncate(string, characterLimit);\n}\n\nfunction isBundledEnvironment() {\n  // If we're in DevTools or LightRider, we are definitely bundled.\n  // TODO: refactor and delete `globalThis.isDevtools`.\n  if (globalThis.isDevtools || globalThis.isLightrider) return true;\n\n  const require = createRequire({url: 'core/lib/page-functions.js'}.url);\n\n  try {\n    // Not foolproof, but `lighthouse-logger` is a dependency of lighthouse that should always be resolvable.\n    // `require.resolve` will only throw in atypical/bundled environments.\n    require.resolve('lighthouse-logger');\n    return false;\n  } catch (err) {\n    return true;\n  }\n}\n\n// This is to support bundled lighthouse.\n// esbuild calls every function with a builtin `__name` (since we set keepNames: true),\n// whose purpose is to store the real name of the function so that esbuild can rename it to avoid\n// collisions. Anywhere we inject dynamically generated code at runtime for the browser to process,\n// we must manually include this function (because esbuild only does so once at the top scope of\n// the bundle, which is irrelevant for code executed in the browser).\n// When minified, esbuild will mangle the name of this wrapper function, so we need to determine what it\n// is at runtime in order to recreate it within the page.\nconst esbuildFunctionWrapperString = createEsbuildFunctionWrapper();\n\nfunction createEsbuildFunctionWrapper() {\n  if (!isBundledEnvironment()) {\n    return '';\n  }\n\n  const functionAsString = (()=>{\n    // eslint-disable-next-line no-unused-vars\n    const a = ()=>{};\n  }).toString()\n    // When not minified, esbuild annotates the call to this function wrapper with PURE.\n    // We know further that the name of the wrapper function should be `__name`, but let's not\n    // hardcode that. Remove the PURE annotation to simplify the regex.\n    .replace('/* @__PURE__ */', '');\n  const functionStringMatch = functionAsString.match(/=\\s*([\\w_]+)\\(/);\n  if (!functionStringMatch) {\n    throw new Error('Could not determine esbuild function wrapper name');\n  }\n\n  /**\n   * @param {Function} fn\n   * @param {string} value\n   */\n  const esbuildFunctionWrapper = (fn, value) =>\n    Object.defineProperty(fn, 'name', {value, configurable: true});\n  const wrapperFnName = functionStringMatch[1];\n  return `let ${wrapperFnName}=${esbuildFunctionWrapper}`;\n}\n\n/**\n * @param {Function} fn\n * @return {string}\n */\nfunction getRuntimeFunctionName(fn) {\n  const match = fn.toString().match(/function ([\\w$]+)/);\n  if (!match) throw new Error(`could not find function name for: ${fn}`);\n  return match[1];\n}\n\n// We setup a number of our page functions to automatically include their dependencies.\n// Because of esbuild bundling, we must refer to the actual (mangled) runtime function name.\n/** @type {Record<string, string>} */\nconst names = {\n  truncate: getRuntimeFunctionName(truncate),\n  getNodeLabel: getRuntimeFunctionName(getNodeLabel),\n  getOuterHTMLSnippet: getRuntimeFunctionName(getOuterHTMLSnippet),\n  getNodeDetails: getRuntimeFunctionName(getNodeDetails),\n};\n\ntruncate.toString = () => `function ${names.truncate}(string, characterLimit) {\n  const Util = { ${Util.truncate} };\n  return Util.truncate(string, characterLimit);\n}`;\n\n/** @type {string} */\nconst getNodeLabelRawString = getNodeLabel.toString();\ngetNodeLabel.toString = () => `function ${names.getNodeLabel}(element) {\n  ${truncate};\n  return (${getNodeLabelRawString})(element);\n}`;\n\n/** @type {string} */\nconst getOuterHTMLSnippetRawString = getOuterHTMLSnippet.toString();\n// eslint-disable-next-line max-len\ngetOuterHTMLSnippet.toString = () => `function ${names.getOuterHTMLSnippet}(element, ignoreAttrs = [], snippetCharacterLimit = 500) {\n  ${truncate};\n  return (${getOuterHTMLSnippetRawString})(element, ignoreAttrs, snippetCharacterLimit);\n}`;\n\n/** @type {string} */\nconst getNodeDetailsRawString = getNodeDetails.toString();\ngetNodeDetails.toString = () => `function ${names.getNodeDetails}(element) {\n  ${truncate};\n  ${getNodePath};\n  ${getNodeSelector};\n  ${getBoundingClientRect};\n  ${getOuterHTMLSnippetRawString};\n  ${getNodeLabelRawString};\n  return (${getNodeDetailsRawString})(element);\n}`;\n\nexport const pageFunctions = {\n  wrapRuntimeEvalErrorInBrowser,\n  getElementsInDocument,\n  getOuterHTMLSnippet,\n  computeBenchmarkIndex,\n  getNodeDetails,\n  getNodePath,\n  getNodeSelector,\n  getNodeLabel,\n  isPositionFixed,\n  wrapRequestIdleCallback,\n  getBoundingClientRect,\n  truncate,\n  esbuildFunctionWrapperString,\n  getRuntimeFunctionName,\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* global window */\n\nimport * as LH from '../../../types/lh.js';\nimport {pageFunctions} from '../../lib/page-functions.js';\n\nclass ExecutionContext {\n  /** @param {LH.Gatherer.ProtocolSession} session */\n  constructor(session) {\n    this._session = session;\n\n    /** @type {number|undefined} */\n    this._executionContextId = undefined;\n    /**\n     * Marks how many execution context ids have been created, for purposes of having a unique\n     * value (that doesn't expose the actual execution context id) to\n     * use for __lighthouseExecutionContextUniqueIdentifier.\n     * @type {number}\n     */\n    this._executionContextIdentifiersCreated = 0;\n\n    // We use isolated execution contexts for `evaluateAsync` that can be destroyed through navigation\n    // and other page actions. Cleanup our relevant bookkeeping as we see those events.\n    // Domains are enabled when a dedicated execution context is requested.\n    session.on('Page.frameNavigated', () => this.clearContextId());\n    session.on('Runtime.executionContextDestroyed', event => {\n      if (event.executionContextId === this._executionContextId) {\n        this.clearContextId();\n      }\n    });\n  }\n\n  /**\n   * Returns the isolated context ID currently in use.\n   */\n  getContextId() {\n    return this._executionContextId;\n  }\n\n  /**\n   * Clears the remembered context ID. Use this method when we have knowledge that the runtime context\n   * we were using has been destroyed by the browser and is no longer available.\n   */\n  clearContextId() {\n    this._executionContextId = undefined;\n  }\n\n  /**\n   * Returns the cached isolated execution context ID or creates a new execution context for the main\n   * frame. The cached execution context is cleared on every gotoURL invocation, so a new one will\n   * always be created on the first call on a new page.\n   * @return {Promise<number>}\n   */\n  async _getOrCreateIsolatedContextId() {\n    if (typeof this._executionContextId === 'number') return this._executionContextId;\n\n    await this._session.sendCommand('Page.enable');\n    await this._session.sendCommand('Runtime.enable');\n\n    const frameTreeResponse = await this._session.sendCommand('Page.getFrameTree');\n    const mainFrameId = frameTreeResponse.frameTree.frame.id;\n\n    const isolatedWorldResponse = await this._session.sendCommand('Page.createIsolatedWorld', {\n      frameId: mainFrameId,\n      worldName: 'lighthouse_isolated_context',\n    });\n\n    this._executionContextId = isolatedWorldResponse.executionContextId;\n    this._executionContextIdentifiersCreated++;\n    return isolatedWorldResponse.executionContextId;\n  }\n\n  /**\n   * Evaluate an expression in the given execution context; an undefined contextId implies the main\n   * page without isolation.\n   * @param {string} expression\n   * @param {number|undefined} contextId\n   * @param {number} timeout\n   * @return {Promise<*>}\n   */\n  async _evaluateInContext(expression, contextId, timeout) {\n    // `__lighthouseExecutionContextUniqueIdentifier` is only used by the FullPageScreenshot gatherer.\n    // See `getNodeDetails` in page-functions.\n    const uniqueExecutionContextIdentifier = contextId === undefined ?\n      undefined :\n      this._executionContextIdentifiersCreated;\n\n    const evaluationParams = {\n      // We need to explicitly wrap the raw expression for several purposes:\n      // 1. Ensure that the expression will be a native Promise and not a polyfill/non-Promise.\n      // 2. Ensure that errors in the expression are captured by the Promise.\n      // 3. Ensure that errors captured in the Promise are converted into plain-old JS Objects\n      //    so that they can be serialized properly b/c JSON.stringify(new Error('foo')) === '{}'\n      //\n      // `__lighthouseExecutionContextUniqueIdentifier` is only used by the FullPageScreenshot gatherer.\n      // See `getNodeDetails` in page-functions.\n      expression: `(function wrapInNativePromise() {\n        ${ExecutionContext._cachedNativesPreamble};\n        globalThis.__lighthouseExecutionContextUniqueIdentifier =\n          ${uniqueExecutionContextIdentifier};\n        ${pageFunctions.esbuildFunctionWrapperString}\n        return new Promise(function (resolve) {\n          return Promise.resolve()\n            .then(_ => ${expression})\n            .catch(${pageFunctions.wrapRuntimeEvalErrorInBrowser})\n            .then(resolve);\n        });\n      }())\n      //# sourceURL=_lighthouse-eval.js`,\n      includeCommandLineAPI: true,\n      awaitPromise: true,\n      returnByValue: true,\n      timeout,\n      contextId,\n    };\n\n    this._session.setNextProtocolTimeout(timeout);\n    const response = await this._session.sendCommand('Runtime.evaluate', evaluationParams);\n\n    const ex = response.exceptionDetails;\n    if (ex) {\n      // An error occurred before we could even create a Promise, should be *very* rare.\n      // Also occurs when the expression is not valid JavaScript.\n      const elidedExpression = expression.replace(/\\s+/g, ' ').substring(0, 100);\n      const messageLines = [\n        'Runtime.evaluate exception',\n        `Expression: ${elidedExpression}\\n---- (elided)`,\n        !ex.stackTrace ? `Parse error at: ${ex.lineNumber + 1}:${ex.columnNumber + 1}` : null,\n        ex.exception?.description || ex.text,\n      ].filter(Boolean);\n      const evaluationError = new Error(messageLines.join('\\n'));\n      return Promise.reject(evaluationError);\n    }\n\n    // Protocol should always return a 'result' object, but it is sometimes undefined.  See #6026.\n    if (response.result === undefined) {\n      return Promise.reject(\n        new Error('Runtime.evaluate response did not contain a \"result\" object'));\n    }\n    const value = response.result.value;\n    if (value?.__failedInBrowser) {\n      return Promise.reject(Object.assign(new Error(), value));\n    } else {\n      return value;\n    }\n  }\n\n  /**\n   * Note: Prefer `evaluate` instead.\n   * Evaluate an expression in the context of the current page. If useIsolation is true, the expression\n   * will be evaluated in a content script that has access to the page's DOM but whose JavaScript state\n   * is completely separate.\n   * Returns a promise that resolves on the expression's value.\n   * @param {string} expression\n   * @param {{useIsolation?: boolean}=} options\n   * @return {Promise<*>}\n   */\n  async evaluateAsync(expression, options = {}) {\n    // Use a higher than default timeout if the user hasn't specified a specific timeout.\n    // Otherwise, use whatever was requested.\n    const timeout = this._session.hasNextProtocolTimeout() ?\n      this._session.getNextProtocolTimeout() :\n      60000;\n    const contextId = options.useIsolation ? await this._getOrCreateIsolatedContextId() : undefined;\n\n    try {\n      // `await` is not redundant here because we want to `catch` the async errors\n      return await this._evaluateInContext(expression, contextId, timeout);\n    } catch (err) {\n      // If we were using isolation and the context disappeared on us, retry one more time.\n      if (contextId && err.message.includes('Cannot find context')) {\n        this.clearContextId();\n        const freshContextId = await this._getOrCreateIsolatedContextId();\n        return this._evaluateInContext(expression, freshContextId, timeout);\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Evaluate a function in the context of the current page.\n   * If `useIsolation` is true, the function will be evaluated in a content script that has\n   * access to the page's DOM but whose JavaScript state is completely separate.\n   * Returns a promise that resolves on a value of `mainFn`'s return type.\n   * @template {unknown[]} T, R\n   * @param {((...args: T) => R)} mainFn The main function to call.\n   * @param {{args: T, useIsolation?: boolean, deps?: Array<Function|string>}} options `args` should\n   *   match the args of `mainFn`, and can be any serializable value. `deps` are functions that must be\n   *   defined for `mainFn` to work.\n   * @return {Promise<Awaited<R>>}\n   */\n  evaluate(mainFn, options) {\n    const argsSerialized = ExecutionContext.serializeArguments(options.args);\n    const depsSerialized = ExecutionContext.serializeDeps(options.deps);\n\n    const expression = `(() => {\n      ${depsSerialized}\n      return (${mainFn})(${argsSerialized});\n    })()`;\n    return this.evaluateAsync(expression, options);\n  }\n\n  /**\n   * Evaluate a function on every new frame from now on.\n   * @template {unknown[]} T\n   * @param {((...args: T) => void)} mainFn The main function to call.\n   * @param {{args: T, deps?: Array<Function|string>}} options `args` should\n   *   match the args of `mainFn`, and can be any serializable value. `deps` are functions that must be\n   *   defined for `mainFn` to work.\n   * @return {Promise<void>}\n   */\n  async evaluateOnNewDocument(mainFn, options) {\n    const argsSerialized = ExecutionContext.serializeArguments(options.args);\n    const depsSerialized = ExecutionContext.serializeDeps(options.deps);\n\n    const expression = `(() => {\n      ${ExecutionContext._cachedNativesPreamble};\n      ${depsSerialized};\n      (${mainFn})(${argsSerialized});\n    })()\n    //# sourceURL=_lighthouse-eval.js`;\n\n    await this._session.sendCommand('Page.addScriptToEvaluateOnNewDocument', {source: expression});\n  }\n\n  /**\n   * Cache native functions/objects inside window so we are sure polyfills do not overwrite the\n   * native implementations when the page loads.\n   * @return {Promise<void>}\n   */\n  async cacheNativesOnNewDocument() {\n    await this.evaluateOnNewDocument(() => {\n      /* c8 ignore start */\n      window.__nativePromise = window.Promise;\n      window.__nativeURL = window.URL;\n      window.__nativePerformance = window.performance;\n      window.__nativeFetch = window.fetch;\n      window.__ElementMatches = window.Element.prototype.matches;\n      window.__HTMLElementBoundingClientRect = window.HTMLElement.prototype.getBoundingClientRect;\n      /* c8 ignore stop */\n    }, {args: []});\n  }\n\n  /**\n   * Prefix every script evaluation with a shadowing of common globals that tend to be ponyfilled\n   * incorrectly by many sites. This allows functions to still refer to `Promise` instead of\n   * Lighthouse-specific backups like `__nativePromise` (injected by `cacheNativesOnNewDocument` above).\n   */\n  static _cachedNativesPreamble = [\n    'const Promise = globalThis.__nativePromise || globalThis.Promise',\n    'const URL = globalThis.__nativeURL || globalThis.URL',\n    'const performance = globalThis.__nativePerformance || globalThis.performance',\n    'const fetch = globalThis.__nativeFetch || globalThis.fetch',\n  ].join(';\\n');\n\n  /**\n   * Serializes an array of arguments for use in an `eval` string across the protocol.\n   * @param {unknown[]} args\n   * @return {string}\n   */\n  static serializeArguments(args) {\n    return args.map(arg => arg === undefined ? 'undefined' : JSON.stringify(arg)).join(',');\n  }\n\n  /**\n   * Serializes an array of functions or strings.\n   *\n   * Also makes sure that an esbuild-bundled version of Lighthouse will\n   * continue to create working code to be executed within the browser.\n   * @param {Array<Function|string>=} deps\n   * @return {string}\n   */\n  static serializeDeps(deps) {\n    deps = [pageFunctions.esbuildFunctionWrapperString, ...deps || []];\n    return deps.map(dep => {\n      if (typeof dep === 'function') {\n        // esbuild will change the actual function name (ie. function actualName() {})\n        // always, and preserve the real name in `actualName.name`.\n        // See esbuildFunctionWrapperString.\n        const output = dep.toString();\n        const runtimeName = pageFunctions.getRuntimeFunctionName(dep);\n        if (runtimeName !== dep.name) {\n          // In addition to exposing the mangled name, also expose the original as an alias.\n          return `${output}; const ${dep.name} = ${runtimeName};`;\n        } else {\n          return output;\n        }\n      } else {\n        return dep;\n      }\n    }).join('\\n');\n  }\n}\n\nexport {ExecutionContext};\n", "/**\n * @license Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n*/\n\n/* eslint-disable no-undef */\n\nimport {ExecutionContext} from '../../core/gather/driver/execution-context.js';\nimport {pageFunctions} from '../../core/lib/page-functions.js';\n\n/**\n *\n * @param {Function} mainFn\n * @param {any[]} args\n * @param {any[]} deps\n * @return {string}\n */\nfunction stringify(mainFn, args, deps) {\n  const argsSerialized = ExecutionContext.serializeArguments(args);\n  const depsSerialized = ExecutionContext.serializeDeps(deps);\n  const expression = `(() => {\n    ${depsSerialized}\n    return (${mainFn})(${argsSerialized});\n  })()`;\n  return expression;\n}\n\nconst fakeWindow = {\n  HTMLElement: class FakeHTMLElement {\n    getAttribute() {\n      return '';\n    }\n\n    getBoundingClientRect() {\n      return {left: 42};\n    }\n  },\n};\n\n// @ts-expect-error\nglobalThis.window = fakeWindow;\nglobalThis.HTMLElement = globalThis.window.HTMLElement;\n// @ts-expect-error\nglobalThis.ShadowRoot = class FakeShadowRoot {};\n// @ts-expect-error\nglobalThis.Node = {DOCUMENT_FRAGMENT_NODE: 11};\n\nfunction mainFn() {\n  const el = Object.assign(new HTMLElement(), {\n    tagName: 'FakeHTMLElement',\n    innerText: 'contents',\n    classList: [],\n  });\n  // @ts-expect-error\n  return getNodeDetails(el);\n}\n\n// Indirect eval so code is run in global scope, and won't have incidental access to the\n// esbuild keepNames function wrapper.\nconst indirectEval = eval;\nconst result = indirectEval(stringify(mainFn, [], [pageFunctions.getNodeDetails]));\nif (result.lhId !== 'page-0-FakeHTMLElement' || result.boundingRect.left !== 42) {\n  throw new Error(`unexpected result, got ${JSON.stringify(result, null, 2)}`);\n}\n"],
  "mappings": "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",
  "names": ["defaultSetTimout", "__name", "defaultClearTimeout", "cachedSetTimeout", "cachedClearTimeout", "runTimeout", "fun", "runClearTimeout", "marker", "queue", "draining", "currentQueue", "queueIndex", "cleanUpNextTick", "drainQueue", "timeout", "len", "nextTick", "args", "i", "Item", "array", "title", "platform", "browser", "env", "argv", "version", "versions", "release", "config", "noop", "on", "addListener", "once", "off", "removeListener", "removeAllListeners", "emit", "binding", "name", "cwd", "chdir", "dir", "umask", "performance", "performanceNow", "hrtime", "previousTimestamp", "clocktime", "seconds", "nanoseconds", "startTime", "uptime", "currentTime", "dif", "browser$1", "browser$1", "createRequire", "__name", "MAX_AVERAGE_SCORE", "MIN_AVERAGE_SCORE", "MAX_FAILING_SCORE", "erf", "x", "sign", "a1", "a2", "a3", "a4", "a5", "t", "y", "__name", "getLogNormalScore", "median", "p10", "value", "INVERSE_ERFC_ONE_FIFTH", "xRatio", "xLogRatio", "p10Ratio", "p10LogRatio", "standardizedX", "complementaryPercentile", "score", "ELLIPSIS", "NBSP", "PASS_THRESHOLD", "RATINGS", "listOfTlds", "Util", "_Util", "__name", "lhr", "url", "entities", "e", "origin", "text", "segments", "parts", "i", "isCode", "preambleText", "linkText", "linkHref", "string", "characterLimit", "ellipseSuffix", "iterator", "lastSegmentIndex", "result", "parsedUrl", "options", "numPathParts", "preserveQuery", "preserveHost", "name", "part", "MAX_LENGTH", "dotIndex", "value", "hostname", "tlds", "splitTld", "lines", "lineMessages", "surroundingLineCount", "minGapSize", "lineNumbersToKeep", "a", "b", "lineNumber", "firstSurroundingLineNumber", "lastSurroundingLineNumber", "surroundingLineNumber", "line", "controlPoints", "percentile", "getLogNormalScore", "wrapRuntimeEvalErrorInBrowser", "err", "__name", "getElementsInDocument", "selector", "realMatchesFn", "results", "_findAllElements", "nodes", "el", "matchedEl", "getOuterHTMLSnippet", "element", "ignoreAttrs", "snippetCharacterLimit", "autoFillIgnoreAttrs", "clone", "attribute", "charCount", "attributeName", "attributeValue", "dirty", "elementWithSrc", "currentSrc", "documentHref", "truncatedString", "truncate", "elementWithStyle", "reOpeningTag", "match", "computeBenchmarkIndex", "benchmarkIndexGC", "start", "iterations", "s", "j", "durationInSeconds", "benchmarkIndexNoGC", "arrA", "arrB", "i", "src", "tgt", "getNodePath", "node", "isShadowRoot", "getNodeParent", "getNodeIndex", "index", "prevNode", "currentNode", "path", "getNodeSelector", "getSelectorPart", "part", "parts", "isPositionFixed", "getStyleAttrValue", "attr", "htmlEl", "currentEl", "position", "getNodeLabel", "tagName", "nodeLabel", "nodeToUseForLabel", "getBoundingClientRect", "rect", "wrapRequestIdleCallback", "cpuSlowdownMultiplier", "maxExecutionTimeMs", "nativeRequestIdleCallback", "cb", "options", "deadline", "timeRemaining", "getNodeDetails", "lhId", "string", "characterLimit", "Util", "isBundledEnvironment", "require", "createRequire", "esbuildFunctionWrapperString", "createEsbuildFunctionWrapper", "functionStringMatch", "esbuildFunctionWrapper", "fn", "value", "getRuntimeFunctionName", "names", "getNodeLabelRawString", "getOuterHTMLSnippetRawString", "getNodeDetailsRawString", "pageFunctions", "ExecutionContext", "_ExecutionContext", "__name", "session", "event", "mainFrameId", "isolatedWorldResponse", "expression", "contextId", "timeout", "uniqueExecutionContextIdentifier", "evaluationParams", "pageFunctions", "response", "ex", "messageLines", "evaluationError", "value", "options", "err", "freshContextId", "mainFn", "argsSerialized", "depsSerialized", "args", "arg", "deps", "dep", "output", "runtimeName", "stringify", "mainFn", "args", "deps", "argsSerialized", "ExecutionContext", "__name", "fakeWindow", "el", "indirectEval", "result", "pageFunctions"]
}

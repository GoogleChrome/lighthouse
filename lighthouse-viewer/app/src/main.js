/**
 * @license
 * Copyright 2016 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';

/* global window, document */

const ReportGenerator = require('../../../lighthouse-core/report/report-generator');

function updatePageHTML(lhresults) {
  const reportGenerator = new ReportGenerator();
  let html;
  try {
    html = reportGenerator.generateHTML(lhresults, 'viewer');
  } catch (err) {
    html = reportGenerator.renderException(err, lhresults);
  }

  // Pull out the report part of the generated HTML.
  const div = document.createElement('div');
  div.innerHTML = html;
  html = div.querySelector('.js-report').outerHTML;

  document.querySelector('output').innerHTML = html;

  // eslint-disable-next-line no-new
  new window.LighthouseReport(); // activate event listeners on new results page.
}

class FileUploader {
  constructor() {
    this.dropZone = document.querySelector('.drop_zone');
    this.placeholder = document.querySelector('.viewer-placeholder');
    this._dragging = false;

    this.attachHiddenFileInput();
    this.addDnDEventListeners();
  }

  attachHiddenFileInput() {
    this.fileInput = document.createElement('input');
    this.fileInput.id = 'hidden-file-input';
    this.fileInput.type = 'file';
    this.fileInput.hidden = true;

    this.fileInput.addEventListener('change', e => {
      this.processFile(e.target.files[0]);
    });

    document.body.appendChild(this.fileInput);
  }

  addDnDEventListeners() {
    this.placeholder.firstElementChild.addEventListener('click', e => {
      this.fileInput.click();
    });

    // The mouseleave event is more reliable than dragleave when the user drops
    // the file outside the window.
    document.addEventListener('mouseleave', _ => {
      if (!this._dragging) {
        return;
      }
      this.resetDraggingUI();
    });

    document.addEventListener('dragover', e => {
      e.stopPropagation();
      e.preventDefault();
      e.dataTransfer.dropEffect = 'copy'; // Explicitly show as copy action.
    });

    document.addEventListener('dragenter', _ => {
      this.dropZone.classList.add('dropping');
      this._dragging = true;
    });

    document.addEventListener('drop', e => {
      e.stopPropagation();
      e.preventDefault();

      this.resetDraggingUI();

      // Ignore other files if more than one is dropped.
      this.processFile(e.dataTransfer.files[0]);
    });
  }

  resetDraggingUI() {
    this.dropZone.classList.remove('dropping');
    this._dragging = false;
  }

  readFile(file) {
    return new Promise((resolve, reject) => {
      const reader = new window.FileReader();
      reader.onload = function(e) {
        resolve(e.target.result);
      };
      reader.onerror = reject;
      reader.readAsText(file);
    });
  }

  /**
   * Reads a file as JSON and updates the page's HTML with the result.
   * @param {!File} file
   * @return {!Promise<string>}
   * @throws file was not valid JSON generated by Lighthouse.
   */
  processFile(file) {
    if (!file.type.match('json')) {
      throw new Error('Unsupported report type. Expected JSON.');
    }

    this.readFile(file).then(jsonStr => {
      try {
        const json = JSON.parse(jsonStr);
        if (!json.lighthouseVersion) {
          throw new Error('JSON file was not generated by Lighthouse');
        }

        updatePageHTML(json);

        // Remove placeholder drop area after viewing results for first time.
        // General dropzone takes over.
        if (this.placeholder) {
          this.placeholder.remove();
          this.placeholder = null;
        }

      } catch (e) {
        console.error(e);
      }
    });
  }
}

window.addEventListener('DOMContentLoaded', _ => {
  // eslint-disable-next-line no-new
  new FileUploader();
});
